<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="http://yamakarov.ru/feed.xml" rel="self" type="application/atom+xml" /><link href="http://yamakarov.ru/" rel="alternate" type="text/html" /><updated>2018-08-03T18:30:39+03:00</updated><id>http://yamakarov.ru/</id><title type="html">Записки Java программиста</title><subtitle>Блог о разработке web админок, CRM-ок и прочего. 
</subtitle><entry><title type="html">Гетерогенные коллекции в Java</title><link href="http://yamakarov.ru/java/2018/08/03/heterogenous-collections.html" rel="alternate" type="text/html" title="Гетерогенные коллекции в Java" /><published>2018-08-03T17:57:00+03:00</published><updated>2018-08-03T17:57:00+03:00</updated><id>http://yamakarov.ru/java/2018/08/03/heterogenous-collections</id><content type="html" xml:base="http://yamakarov.ru/java/2018/08/03/heterogenous-collections.html">&lt;p&gt;Сегодня наткнулся в Spring на класс &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/ParameterizedTypeReference.html&quot;&gt;ParameterizedTypeReference&lt;/a&gt;, который позволяет сохранять информацию об обобщенных типах. 
Javadoc к этому классу отправляет за подробностями в блог &lt;a href=&quot;http://gafter.blogspot.com/2006/12/super-type-tokens.html&quot;&gt;Нила Гафтера&lt;/a&gt;.
Там я и нашел пример гетерогеносных коллекций, таких в которые можно складывать разные типы данных и при этом типобезопасно.
Что мне позволило написать простенький пример в тематике баз данных:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ru&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;yamakarov&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;examples&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HeterogenousCollection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addresses&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Row&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// В id можно положить только число&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// В name можно положить только строку&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Yakov&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Можно класть не только reifable типы&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addresses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Питер&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Москва&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doubleValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addresses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;К сожалению я не до конца понимаю, работает это или нет. К тому же хочется как то заставить компилятор ругаться при попытке взять из ряда колонку, которой там не может быть.&lt;/p&gt;</content><author><name></name></author><summary type="html">Сегодня наткнулся в Spring на класс ParameterizedTypeReference, который позволяет сохранять информацию об обобщенных типах. Javadoc к этому классу отправляет за подробностями в блог Нила Гафтера. Там я и нашел пример гетерогеносных коллекций, таких в которые можно складывать разные типы данных и при этом типобезопасно. Что мне позволило написать простенький пример в тематике баз данных:</summary></entry><entry><title type="html">Как фиксить баги</title><link href="http://yamakarov.ru/software/2018/08/02/troubleshooting.html" rel="alternate" type="text/html" title="Как фиксить баги" /><published>2018-08-02T20:09:00+03:00</published><updated>2018-08-02T20:09:00+03:00</updated><id>http://yamakarov.ru/software/2018/08/02/troubleshooting</id><content type="html" xml:base="http://yamakarov.ru/software/2018/08/02/troubleshooting.html">&lt;p&gt;Современное программное обеспечение содержит много багов.
Программисты по мере сил их исправляют.
Приходится это делать и мне.
Самые легкие баги легко воспроизводятся людьми.
Я могу их воспроизвести в тестах и поправить код.&lt;/p&gt;

&lt;p&gt;Есть более серьезные насекомые.
Это когда вообще не понятно, что происходит.
Тогда я стараюсь придерживаться следующей последовательности действий.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Читаем код поломавшегося приложения, если понятно где есть ошибка, ее можно покрыть тестами и исправить.&lt;/li&gt;
  &lt;li&gt;Часто после чтения кода остаешься в недоумении. Все должно работать и так. Но не работает.&lt;/li&gt;
  &lt;li&gt;Тогда надо подключаться и дебажить код. В дебаге можно найти почти все, кроме проблем с параллельным выполнением потоков. Но продакшен систему не подебажишь, из-за того, что ее нельзя останавливать.&lt;/li&gt;
  &lt;li&gt;И тогда нам на помощь приходят логи, которые кстати можно читать до чтения кода. И которые помогают быстро найти нужные участки кода. Я дописываю недостающие информацию для выведения в логи. Писать логи это огромное искусство, делая это идешь по лезвию бритвы. Слишком мало логов, не разобраться что происходит. Слишком много логов невозможно разумно обработать, особенно если вы ищете ошибку на тысячи серверов.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Очень важно не зависать на чтение кода программы, надо активно диагностировать проблему. Дебажить, добавлять логи, писать тесты. 
Это ускоряет понимание.&lt;/p&gt;</content><author><name></name></author><summary type="html">Современное программное обеспечение содержит много багов. Программисты по мере сил их исправляют. Приходится это делать и мне. Самые легкие баги легко воспроизводятся людьми. Я могу их воспроизвести в тестах и поправить код.</summary></entry><entry><title type="html">Тесты производительности</title><link href="http://yamakarov.ru/java/jmh/2018/08/01/benchmarks.html" rel="alternate" type="text/html" title="Тесты производительности" /><published>2018-08-01T12:59:00+03:00</published><updated>2018-08-01T12:59:00+03:00</updated><id>http://yamakarov.ru/java/jmh/2018/08/01/benchmarks</id><content type="html" xml:base="http://yamakarov.ru/java/jmh/2018/08/01/benchmarks.html">&lt;p&gt;В мире придумано уже очень много алгоритмов.
Все они в том или ином виде реализованы в языках программирования и хранятся в библиотеках.
Все кто использует стандартную библиотеку получают более менее стандартный результат.
Многие люди стараются превзойти этот результат и написать более быстрые алгоритмы или более эффективные.
Для того, чтобы сравнить два алгоритма, надо проводить тестирование производительности.
Это довольно сложная тема, о которой много пишет &lt;a href=&quot;https://shipilev.net/&quot;&gt;Шипилев&lt;/a&gt;.
Он же является ответственным за инструмент для проведения бенчмарков на java &lt;a href=&quot;http://openjdk.java.net/projects/code-tools/jmh/&quot;&gt;JMH&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Документации по JMH довольно мало.
Я нашел следующие источники информации:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://shipilev.net/&quot;&gt;Доклады&lt;/a&gt; Шипилева&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/search?q=jmh&quot;&gt;Stackoverflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/&quot;&gt;Примеры из исходников&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Это позволило мне написать свой первый простой и возможно не очень показательный бенчмарк:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ru&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;yamakarov&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.TreeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.openjdk.jmh.annotations.Benchmark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.openjdk.jmh.annotations.Scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.openjdk.jmh.annotations.State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.openjdk.jmh.runner.Runner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.openjdk.jmh.runner.RunnerException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.openjdk.jmh.runner.options.Options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.openjdk.jmh.runner.options.OptionsBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JavaMapBenchmark&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITEM_COUNT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Benchmark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BenchMarkState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;treeMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BenchMarkState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITEM_COUNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;treeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;hashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITEM_COUNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Benchmark&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testTreeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BenchMarkState&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;treeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


    &lt;span class=&quot;nd&quot;&gt;@Benchmark&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testHashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BenchMarkState&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RunnerException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Options&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OptionsBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JavaMapBenchmark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSimpleName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Runner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Я получил следующий результат:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Benchmark                      Mode  Cnt         Score        Error  Units
JavaMapBenchmark.testHashMap  thrpt    5  16778578.614 ± 901741.764  ops/s
JavaMapBenchmark.testTreeMap  thrpt    5   6345125.655 ± 335465.052  ops/s
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Таким образом в моем случае get в HashMap быстрее чем в TreeMap.&lt;/p&gt;

&lt;p&gt;Какие вопросы я оставил без ответа:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;State и как с ним правильно работать в бенчмарке&lt;/li&gt;
  &lt;li&gt;Настройки запуски бенчмарка с помощью аннотаций&lt;/li&gt;
  &lt;li&gt;Интерпретация результатов бенчмарка, что значат все эти Mode, Cnt, Score, Error, Units.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">В мире придумано уже очень много алгоритмов. Все они в том или ином виде реализованы в языках программирования и хранятся в библиотеках. Все кто использует стандартную библиотеку получают более менее стандартный результат. Многие люди стараются превзойти этот результат и написать более быстрые алгоритмы или более эффективные. Для того, чтобы сравнить два алгоритма, надо проводить тестирование производительности. Это довольно сложная тема, о которой много пишет Шипилев. Он же является ответственным за инструмент для проведения бенчмарков на java JMH.</summary></entry><entry><title type="html">Процессор: предсказание ветвления</title><link href="http://yamakarov.ru/processors/2018/07/31/branch-prediction.html" rel="alternate" type="text/html" title="Процессор: предсказание ветвления" /><published>2018-07-31T12:24:00+03:00</published><updated>2018-07-31T12:24:00+03:00</updated><id>http://yamakarov.ru/processors/2018/07/31/branch-prediction</id><content type="html" xml:base="http://yamakarov.ru/processors/2018/07/31/branch-prediction.html">&lt;p&gt;Современные процессоры обладают конвейерной архитектурой.
Это означает, что каждая ассемблерная операция разбивается на несколько микроопераций.
В свою очередь микрооперации последовательно выполняются на разных устройствах процессора.
Одновременно процессор может выполнять несколько операций.
Лишь бы только они не зависели друг от друга.
Зависимость заключается в том, что для выполнения следующей операции требуются данные предыдущей операции.
С этой зависимостью ничего нельзя сделать на уровне процессора, можно только распаралелить программу.
Но можно попытаться начать заранее выполнять ветви исполнения.
Для этого, предсказывается результат ветвления и процессор исполняет код по ветви.
Если предсказание оказывается неправильным, результаты вычислений отбрасываются и мы теряем в производительности.&lt;/p&gt;

&lt;p&gt;О том как различные процессоры предсказывают ветвления можно прочитать у &lt;a href=&quot;https://www.agner.org/optimize/microarchitecture.pdf&quot;&gt;Агнера Фога&lt;/a&gt;. 
Этот материал предназначен для писателей компиляторов, для общего ознакомления читать мануал довольно скучно, много повторяющихся моментов для разных процессоров.
Материал изложен очень кратко и сжато.&lt;/p&gt;

&lt;p&gt;Гораздо более захватывающим мне показался &lt;a href=&quot;https://stackoverflow.com/questions/11227809/why-is-it-faster-to-process-a-sorted-array-than-an-unsorted-array&quot;&gt;вопрос про массивы&lt;/a&gt; на stackoverflow.
В ветке обсуждения много хаков, которые можно использовать для уменьшения ветвления в программе. 
Присутствуют ссылки на интересненые материалы и статьи. 
Основной посыл в том, что заботиться о сбросе конвейера нужно только в критических секциях кода.
Эти секции лучше не искать на глазок, а пользоваться инструментами, профилировщиками.&lt;/p&gt;</content><author><name></name></author><summary type="html">Современные процессоры обладают конвейерной архитектурой. Это означает, что каждая ассемблерная операция разбивается на несколько микроопераций. В свою очередь микрооперации последовательно выполняются на разных устройствах процессора. Одновременно процессор может выполнять несколько операций. Лишь бы только они не зависели друг от друга. Зависимость заключается в том, что для выполнения следующей операции требуются данные предыдущей операции. С этой зависимостью ничего нельзя сделать на уровне процессора, можно только распаралелить программу. Но можно попытаться начать заранее выполнять ветви исполнения. Для этого, предсказывается результат ветвления и процессор исполняет код по ветви. Если предсказание оказывается неправильным, результаты вычислений отбрасываются и мы теряем в производительности.</summary></entry><entry><title type="html">Java Annotated: полезный блог от JetBrains</title><link href="http://yamakarov.ru/java/2018/07/30/java-annotated.html" rel="alternate" type="text/html" title="Java Annotated: полезный блог от JetBrains" /><published>2018-07-30T17:42:00+03:00</published><updated>2018-07-30T17:42:00+03:00</updated><id>http://yamakarov.ru/java/2018/07/30/java-annotated</id><content type="html" xml:base="http://yamakarov.ru/java/2018/07/30/java-annotated.html">&lt;p&gt;Разбираясь с &lt;a href=&quot;https://blog.acolyer.org/2015/11/27/hamt/&quot;&gt;хеш-мапами&lt;/a&gt;, наткнулся на замечательный блог от JetBrains &lt;a href=&quot;https://blog.jetbrains.com/idea/tag/java-annotated/&quot;&gt;Java Annotated&lt;/a&gt;.
Очень много ссылок на полезные статьи в мире Java.
Хорошая возможность познакомиться с качественными прикладными материалами.
А также возможность оставаться в курсе новостей.&lt;/p&gt;</content><author><name></name></author><summary type="html">Разбираясь с хеш-мапами, наткнулся на замечательный блог от JetBrains Java Annotated. Очень много ссылок на полезные статьи в мире Java. Хорошая возможность познакомиться с качественными прикладными материалами. А также возможность оставаться в курсе новостей.</summary></entry><entry><title type="html">Статьи об информатике от уважающих себя компаний</title><link href="http://yamakarov.ru/cs/2018/07/27/company-papers.html" rel="alternate" type="text/html" title="Статьи об информатике от уважающих себя компаний" /><published>2018-07-27T17:47:00+03:00</published><updated>2018-07-27T17:47:00+03:00</updated><id>http://yamakarov.ru/cs/2018/07/27/company-papers</id><content type="html" xml:base="http://yamakarov.ru/cs/2018/07/27/company-papers.html">&lt;p&gt;Очень полезно читать хорошие статьи и к &lt;a href=&quot;/highload/2018/07/24/ok-blogs.html&quot;&gt;списку блогов&lt;/a&gt; я хочу добавить список ресурсов со ссылками на хорошие статьи. 
Взято из того же видео.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ai.google/research/pubs&quot;&gt;Google&lt;/a&gt; - публикации сотрудников Google over 4000 штук.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://research.fb.com/publications/&quot;&gt;Facebook&lt;/a&gt; - список статей от Facebook, чуть меньше чем у Google, но много.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mtdvio/every-programmer-should-know&quot;&gt;Every-programmer-should-know&lt;/a&gt; - известная подборка со ссылкой на видео и статьи&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/papers-we-love/papers-we-love&quot;&gt;Papers-we-love&lt;/a&gt; - просто улетная подборка статей, постоянно пополняющаяся, просто нереально читать, также содержит ссылки на другие подборки.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://amturing.acm.org/lectures.cfm&quot;&gt;A.M. TURING AWARD&lt;/a&gt; - ссылки на стать и видео людей, которые получили премию Тьюринга, они сами их выбрали&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sigplan.org/Awards/&quot;&gt;Sigplan&lt;/a&gt; - лично мне не очень понравилось, ссылки ведут на &lt;a href=&quot;https://dl.acm.org/citation.cfm?id=1291155&quot;&gt;ACM&lt;/a&gt;, который просит денежку.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Очень полезно читать хорошие статьи и к списку блогов я хочу добавить список ресурсов со ссылками на хорошие статьи. Взято из того же видео. Google - публикации сотрудников Google over 4000 штук. Facebook - список статей от Facebook, чуть меньше чем у Google, но много. Every-programmer-should-know - известная подборка со ссылкой на видео и статьи Papers-we-love - просто улетная подборка статей, постоянно пополняющаяся, просто нереально читать, также содержит ссылки на другие подборки. A.M. TURING AWARD - ссылки на стать и видео людей, которые получили премию Тьюринга, они сами их выбрали Sigplan - лично мне не очень понравилось, ссылки ведут на ACM, который просит денежку.</summary></entry><entry><title type="html">Хоар, Чарльз Энтони Ричард</title><link href="http://yamakarov.ru/cs/2018/07/26/hoare.html" rel="alternate" type="text/html" title="Хоар, Чарльз Энтони Ричард" /><published>2018-07-26T20:27:00+03:00</published><updated>2018-07-26T20:27:00+03:00</updated><id>http://yamakarov.ru/cs/2018/07/26/hoare</id><content type="html" xml:base="http://yamakarov.ru/cs/2018/07/26/hoare.html">&lt;p&gt;&lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%A5%D0%BE%D0%B0%D1%80,_%D0%A7%D0%B0%D1%80%D0%BB%D1%8C%D0%B7_%D0%AD%D0%BD%D1%82%D0%BE%D0%BD%D0%B8_%D0%A0%D0%B8%D1%87%D0%B0%D1%80%D0%B4&quot;&gt;Хоар, Чарльз Энтони Ричард&lt;/a&gt; -
великий ученый, внесший большой вклад в информатику.&lt;/p&gt;

&lt;p&gt;Мне понравилась его статья &lt;a href=&quot;https://www.cs.cmu.edu/~crary/819-f09/Hoare69.pdf&quot;&gt;An Axiomatic Basis for Computer Programming&lt;/a&gt;.
Написана доступным языком и в общих чертах определяет пути доказательства программ.
Удивительно как человеку удалось формализовать в аксиомах, утверждениях и теоремах, то как я убеждаюсь в корректности своих программ.
Я понял, что делаю это недостаточно формально, не отдавая себе отчета в истинных посылках и следствиях.
И в статье показано, как это можно исправить.&lt;/p&gt;

&lt;p&gt;Статья очень много &lt;a href=&quot;https://scholar.google.ru/scholar?cites=9133631523567191205&amp;amp;as_sdt=2005&amp;amp;sciodt=0,5&amp;amp;hl=ru&quot;&gt;цитируется&lt;/a&gt; и по ней можно найти огромное количество материалов, связанных с формальным описанием языков и программ на них.&lt;/p&gt;

&lt;p&gt;Хоар является автором множества других интересных статей.&lt;/p&gt;</content><author><name></name></author><summary type="html">Хоар, Чарльз Энтони Ричард - великий ученый, внесший большой вклад в информатику.</summary></entry><entry><title type="html">Самые влиятельные Java люди</title><link href="http://yamakarov.ru/java/2018/07/25/java-influencers.html" rel="alternate" type="text/html" title="Самые влиятельные Java люди" /><published>2018-07-25T17:00:00+03:00</published><updated>2018-07-25T17:00:00+03:00</updated><id>http://yamakarov.ru/java/2018/07/25/java-influencers</id><content type="html" xml:base="http://yamakarov.ru/java/2018/07/25/java-influencers.html">&lt;p&gt;&lt;a href=&quot;https://jaxlondon.com/blog/java-core-languages/top-20-java-influencers-of-2018/?utm_content=buffer8fc42&amp;amp;utm_medium=social&amp;amp;utm_source=twitter.com&amp;amp;utm_campaign=buffer&quot;&gt;Список влиятельные людей в сообществе Java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;К моему стыду оказалось, что &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%A4%D0%B0%D1%83%D0%BB%D0%B5%D1%80,_%D0%9C%D0%B0%D1%80%D1%82%D0%B8%D0%BD&quot;&gt;Мартин Фаулер&lt;/a&gt; и
&lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%9C%D0%B0%D1%80%D1%82%D0%B8%D0%BD,_%D0%A0%D0%BE%D0%B1%D0%B5%D1%80%D1%82&quot;&gt;Роберт Мартин&lt;/a&gt; разные люди, а не один Дядя Боб.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://yamakarov.ru/img/JAX_London_2018_Infografik_Influencer_600x1200_47308_v3.jpg&quot; alt=&quot;Влиятельные Java люди&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Список влиятельные людей в сообществе Java</summary></entry><entry><title type="html">Блоги о высоконагруженных системах, за которыми стоит следить</title><link href="http://yamakarov.ru/highload/2018/07/24/ok-blogs.html" rel="alternate" type="text/html" title="Блоги о высоконагруженных системах, за которыми стоит следить" /><published>2018-07-24T11:40:00+03:00</published><updated>2018-07-24T11:40:00+03:00</updated><id>http://yamakarov.ru/highload/2018/07/24/ok-blogs</id><content type="html" xml:base="http://yamakarov.ru/highload/2018/07/24/ok-blogs.html">&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://shipilev.net/&quot; target=&quot;_blank&quot;&gt;Алексей Шипилев&lt;/a&gt; - Очень известный блог специалиста по внутренностям JVM.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mechanical-sympathy.blogspot.com/&quot; target=&quot;_blank&quot;&gt;Мартин Томпсон&lt;/a&gt; - интересный блог о взаимодействии программ и железа, для получения максимального результата. С 2014 года не обновляется.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stuff-gil-says.blogspot.com/&quot; target=&quot;_blank&quot;&gt;Джил Тене&lt;/a&gt; - разработчик Azul JVM, который редко пишет очень интересные вещи про GC, synchronization и т.п.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://psy-lob-saw.blogspot.com/&quot; target=&quot;_blank&quot;&gt;Нитсан Вакарт&lt;/a&gt; - использует Java в высокочастотной торговле, и пишет о том как обрабатывать кучу запросов без задержек. Также хорошо разбирается в Java профайлерах.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.brendangregg.com/&quot; target=&quot;_blank&quot;&gt;Брендан Грег&lt;/a&gt; - пишет о производительности в Linux, инструменты для измерения, средства для отладки.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.acolyer.org/&quot; target=&quot;_blank&quot;&gt;Адриан Кольер&lt;/a&gt; - в своем блоге публикует рецензии на интересные статьи в Computer Science.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aphyr.com/&quot; target=&quot;_blank&quot;&gt;Кайл Кингсбери&lt;/a&gt; - находит ошибки в протоколах баз данных и публикует статьи об этом, очень интересно познакомиться с процессом тестирования распределенных баз данных&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://highscalability.com/&quot; target=&quot;_blank&quot;&gt;Тод Хофф&lt;/a&gt; - пишет о разных архитектурах высокопроизводительных систем.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Взято из лекции Вадима Цесько в Технополисе:&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/2LTuRDFAzqc?start=4200&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name></name></author><summary type="html">Алексей Шипилев - Очень известный блог специалиста по внутренностям JVM. Мартин Томпсон - интересный блог о взаимодействии программ и железа, для получения максимального результата. С 2014 года не обновляется. Джил Тене - разработчик Azul JVM, который редко пишет очень интересные вещи про GC, synchronization и т.п. Нитсан Вакарт - использует Java в высокочастотной торговле, и пишет о том как обрабатывать кучу запросов без задержек. Также хорошо разбирается в Java профайлерах. Брендан Грег - пишет о производительности в Linux, инструменты для измерения, средства для отладки. Адриан Кольер - в своем блоге публикует рецензии на интересные статьи в Computer Science. Кайл Кингсбери - находит ошибки в протоколах баз данных и публикует статьи об этом, очень интересно познакомиться с процессом тестирования распределенных баз данных Тод Хофф - пишет о разных архитектурах высокопроизводительных систем.</summary></entry><entry><title type="html">ACID транзакции в No SQL БД</title><link href="http://yamakarov.ru/db/2018/07/23/no-sql-acid.html" rel="alternate" type="text/html" title="ACID транзакции в No SQL БД" /><published>2018-07-23T16:52:00+03:00</published><updated>2018-07-23T16:52:00+03:00</updated><id>http://yamakarov.ru/db/2018/07/23/no-sql-acid</id><content type="html" xml:base="http://yamakarov.ru/db/2018/07/23/no-sql-acid.html">&lt;p&gt;Вводное описание &lt;a href=&quot;https://habr.com/company/odnoklassniki/blog/417593/&quot;&gt;C*One&lt;/a&gt; - масштабируемого, отказоустойчивого хранилища с поддержкой полноценных распределенных транзакций.&lt;/p&gt;</content><author><name></name></author><summary type="html">Вводное описание C*One - масштабируемого, отказоустойчивого хранилища с поддержкой полноценных распределенных транзакций.</summary></entry></feed>