<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="http://yamakarov.ru/feed.xml" rel="self" type="application/atom+xml" /><link href="http://yamakarov.ru/" rel="alternate" type="text/html" /><updated>2018-11-16T18:28:05+03:00</updated><id>http://yamakarov.ru/feed.xml</id><title type="html">Записки Java программиста</title><subtitle>Блог о разработке web админок, CRM-ок и прочего. 
</subtitle><entry><title type="html">Serializable уровень изоляции</title><link href="http://yamakarov.ru/serializable/2018/11/16/serializable-isolation-level.html" rel="alternate" type="text/html" title="Serializable уровень изоляции" /><published>2018-11-16T18:21:00+03:00</published><updated>2018-11-16T18:21:00+03:00</updated><id>http://yamakarov.ru/serializable/2018/11/16/serializable-isolation-level</id><content type="html" xml:base="http://yamakarov.ru/serializable/2018/11/16/serializable-isolation-level.html">&lt;p&gt;Наконец-то понял как работает &lt;a href=&quot;https://sqlperformance.com/2014/04/t-sql-queries/the-serializable-isolation-level&quot;&gt;serailizable уровень изоляции&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Нашел ему применение.
Пусть у вас есть таблица, в которой добавлются новые записи с возврастающими id.
Вы читаете из этой таблицы только новые записи.
И вам очень не хотелось бы, чтобы записи с более высоким id появлялись раньше более низких.
А такое может произойти, если в в начале транзакции вы генерите id и они длятся разное время, так что по времени 
транзакции могут быть вложены друг в друга.&lt;/p&gt;

&lt;p&gt;Serializable уровень изоляции требует, чтобы записи и чтения в транзакции происходили, так как будто они происходят в какой-то линейной последовательности.
Таким образом исключается возможность вложения транзакций описанное выше.&lt;/p&gt;

&lt;p&gt;Конечно, ничего не бывает бесплатным и приходится платить за взятие лока на записи которые используются при чтении.
В моем случае лочится будет вся таблица, что меня устраивает, таблица не нагружена и очень важно не потерять ни одного обновления.&lt;/p&gt;</content><author><name></name></author><summary type="html">Наконец-то понял как работает serailizable уровень изоляции.</summary></entry><entry><title type="html">Scala: параметры по имени</title><link href="http://yamakarov.ru/scala/2018/11/15/scala-by-name-parameters.html" rel="alternate" type="text/html" title="Scala: параметры по имени" /><published>2018-11-15T16:43:00+03:00</published><updated>2018-11-15T16:43:00+03:00</updated><id>http://yamakarov.ru/scala/2018/11/15/scala-by-name-parameters</id><content type="html" xml:base="http://yamakarov.ru/scala/2018/11/15/scala-by-name-parameters.html">&lt;p&gt;Сегодня встретился с интересным кодом на Scala:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logDebug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isDebugEnabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Подумал, что какие-то недалекие люди такое писали. 
Ведь всем известно, что&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;log.isDegubEnabled
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Вызывается для того, чтобы умный JIT компилятор увидел, что это выражение всегда &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; и выпилил вызов&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;log.debug(msg)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;И мы бы сэкономили кучу ресурсов на формировании сложного &lt;code class=&quot;highlighter-rouge&quot;&gt;msg&lt;/code&gt;.
Оказалось это я дурак и Scala поддерживает параметры по имени, о чем нам говорит &lt;code class=&quot;highlighter-rouge&quot;&gt;=&amp;gt;&lt;/code&gt; перед типом.
И тогда значение параметра вычисляется не в момент вызова функции, а в момент использования.
Это позволяет не только экономить ресурсы при выключенном дебаге, но и делать еще некоторые трюки, например реализовать функцию &lt;code class=&quot;highlighter-rouge&quot;&gt;notIf&lt;/code&gt;, которая вычисляет значение выражение только если условие выполняется.&lt;/p&gt;

&lt;p&gt;В Java такого нет, а в Clojure такое можно было бы реализовать с помощью макросов.&lt;/p&gt;</content><author><name></name></author><summary type="html">Сегодня встретился с интересным кодом на Scala:</summary></entry><entry><title type="html">Неизвестные языки</title><link href="http://yamakarov.ru/software/2018/11/14/unknown-languages.html" rel="alternate" type="text/html" title="Неизвестные языки" /><published>2018-11-14T18:50:00+03:00</published><updated>2018-11-14T18:50:00+03:00</updated><id>http://yamakarov.ru/software/2018/11/14/unknown-languages</id><content type="html" xml:base="http://yamakarov.ru/software/2018/11/14/unknown-languages.html">&lt;p&gt;Раньше было хорошо.
Взял тоненькую книжечку от Кернигана и Ричи про C, прочитал, и кодь себе на здоровье.
Ничего тебе больше и не надо знать.&lt;/p&gt;

&lt;p&gt;Теперь другое.
Я не знаю:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Java для того, чтобы написать бекэнд&lt;/li&gt;
  &lt;li&gt;Не знаю Groovy для сборки проекта&lt;/li&gt;
  &lt;li&gt;Не знаю SQL для запросов к базе данных&lt;/li&gt;
  &lt;li&gt;Не знаю Typescript для фронтенда&lt;/li&gt;
  &lt;li&gt;Не знаю Javascript, в который конвертируется Typescript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Как жить-то при таком количестве языков?&lt;/p&gt;</content><author><name></name></author><summary type="html">Раньше было хорошо. Взял тоненькую книжечку от Кернигана и Ричи про C, прочитал, и кодь себе на здоровье. Ничего тебе больше и не надо знать.</summary></entry><entry><title type="html">Достигая совершенства</title><link href="http://yamakarov.ru/excellence/2018/11/13/archieving-excellence.html" rel="alternate" type="text/html" title="Достигая совершенства" /><published>2018-11-13T19:07:00+03:00</published><updated>2018-11-13T19:07:00+03:00</updated><id>http://yamakarov.ru/excellence/2018/11/13/archieving-excellence</id><content type="html" xml:base="http://yamakarov.ru/excellence/2018/11/13/archieving-excellence.html">&lt;p&gt;Очень интересная статья, про то как &lt;a href=&quot;https://fermatslibrary.com/s/the-mundanity-of-excellence-an-ethnographic-report-on-stratification-and-olympic-swimmers&quot;&gt;пловцы достигают совершенства&lt;/a&gt;.
Кажется, это может быть верно в любой области.&lt;/p&gt;

&lt;p&gt;Основные тезисы в заключении:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Качество превосходит количество. Делать больше не значит делать лучше. Важно в процессе работы меняться и совершенствоваться.&lt;/li&gt;
  &lt;li&gt;Талант ничего не объясняет. Совершенство не является следствием природных данных.&lt;/li&gt;
  &lt;li&gt;Совершенство есть результат составных усилий. Повторение и улучшение обычных простых действий с течением времени приводит к выдающимся результатам.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Очень интересная статья, про то как пловцы достигают совершенства. Кажется, это может быть верно в любой области.</summary></entry><entry><title type="html">Что можно измерить в разработке ПО?</title><link href="http://yamakarov.ru/software/2018/11/12/kpi.html" rel="alternate" type="text/html" title="Что можно измерить в разработке ПО?" /><published>2018-11-12T16:52:00+03:00</published><updated>2018-11-12T16:52:00+03:00</updated><id>http://yamakarov.ru/software/2018/11/12/kpi</id><content type="html" xml:base="http://yamakarov.ru/software/2018/11/12/kpi.html">&lt;p&gt;Статья &lt;a href=&quot;https://holub.com/#about&quot;&gt;Алена Голуба&lt;/a&gt; про &lt;a href=&quot;https://holub.com/kpis-velocity-and-other-destructive-metrics/&quot;&gt;метрики разработки программного обеспечения&lt;/a&gt; 
говорит, что надо мерить скорость развития и следить за удовлетворенностью клиентов.
Все это для того, чтобы развиваться в нужном направлении.
Если вы будете развиваться и двигаться в сторону довольных клиентов, то у вас все будет.
При этом не надо следить за тем, как хорошо вы предсказываете, как быстро выполняете таски и насколько много кода пишете.
Статья во многом перекликается с книгой &lt;a href=&quot;https://www.ozon.ru/context/detail/id/2338486/&quot;&gt;человеческий фактор&lt;/a&gt;, 
там тоже много говорится про неуправляемость команд и невозможность простыми метриками заставить их делать нужные вещи.
Особенно в этой книге мне понравилась история про женщину, которая не писала много кода и ее вклад было невозможно измерить по артефактам.
При этом она выполняла мотивирующую и связующую роль в команде.
Благодаря ей команды были сплоченными, а проекты успешными.&lt;/p&gt;</content><author><name></name></author><summary type="html">Статья Алена Голуба про метрики разработки программного обеспечения говорит, что надо мерить скорость развития и следить за удовлетворенностью клиентов. Все это для того, чтобы развиваться в нужном направлении. Если вы будете развиваться и двигаться в сторону довольных клиентов, то у вас все будет. При этом не надо следить за тем, как хорошо вы предсказываете, как быстро выполняете таски и насколько много кода пишете. Статья во многом перекликается с книгой человеческий фактор, там тоже много говорится про неуправляемость команд и невозможность простыми метриками заставить их делать нужные вещи. Особенно в этой книге мне понравилась история про женщину, которая не писала много кода и ее вклад было невозможно измерить по артефактам. При этом она выполняла мотивирующую и связующую роль в команде. Благодаря ей команды были сплоченными, а проекты успешными.</summary></entry><entry><title type="html">Как достичь разумной производительности?</title><link href="http://yamakarov.ru/java/performance/2018/11/09/fix-performance.html" rel="alternate" type="text/html" title="Как достичь разумной производительности?" /><published>2018-11-09T18:47:00+03:00</published><updated>2018-11-09T18:47:00+03:00</updated><id>http://yamakarov.ru/java/performance/2018/11/09/fix-performance</id><content type="html" xml:base="http://yamakarov.ru/java/performance/2018/11/09/fix-performance.html">&lt;p&gt;В твиттере пролетела ссылка на интересно видео о том, как &lt;a href=&quot;https://www.youtube.com/watch?v=i9No3Jw8vew&quot;&gt;пофиксить производительность HttpClient&lt;/a&gt;.
Вкратце, рецепт простой:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Замерьте производительность&lt;/li&gt;
  &lt;li&gt;Сравните производительность с другими решениями&lt;/li&gt;
  &lt;li&gt;Сравните производительность на разных платформах&lt;/li&gt;
  &lt;li&gt;Пофиксите проблемы&lt;/li&gt;
  &lt;li&gt;Повторяйте до тех пор, пока не получите нужный результат&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Особенно полезными будут обширные знания, внимательное изучение спецификации, бенчмарки и профилирование.&lt;/p&gt;</content><author><name></name></author><summary type="html">В твиттере пролетела ссылка на интересно видео о том, как пофиксить производительность HttpClient. Вкратце, рецепт простой:</summary></entry><entry><title type="html">Вышел Angular 7</title><link href="http://yamakarov.ru/angular7/2018/11/08/angular7.html" rel="alternate" type="text/html" title="Вышел Angular 7" /><published>2018-11-08T18:25:00+03:00</published><updated>2018-11-08T18:25:00+03:00</updated><id>http://yamakarov.ru/angular7/2018/11/08/angular7</id><content type="html" xml:base="http://yamakarov.ru/angular7/2018/11/08/angular7.html">&lt;p&gt;Angular отличный фреймворк для разработки админок.
Google сделал отличный набор компонент для разработки на этом фреймворк с реализацией material дизайна.
Сейчас актуальна &lt;a href=&quot;https://blog.angular.io/version-7-of-angular-cli-prompts-virtual-scroll-drag-and-drop-and-more-c594e22e7b8c&quot;&gt;7 версия&lt;/a&gt; c виртуальным скроллом и драгндропом.&lt;/p&gt;</content><author><name></name></author><summary type="html">Angular отличный фреймворк для разработки админок. Google сделал отличный набор компонент для разработки на этом фреймворк с реализацией material дизайна. Сейчас актуальна 7 версия c виртуальным скроллом и драгндропом.</summary></entry><entry><title type="html">Скрипты на Java</title><link href="http://yamakarov.ru/java11/2018/11/07/java-scripts.html" rel="alternate" type="text/html" title="Скрипты на Java" /><published>2018-11-07T19:00:00+03:00</published><updated>2018-11-07T19:00:00+03:00</updated><id>http://yamakarov.ru/java11/2018/11/07/java-scripts</id><content type="html" xml:base="http://yamakarov.ru/java11/2018/11/07/java-scripts.html">&lt;p&gt;В Java 11 появилась возможность исполнять файл с классами без предварительной компиляции.
Об этом есть отличная статья на &lt;a href=&quot;https://blog.codefx.org/java/scripting-java-shebang/&quot;&gt;CodeFX&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">В Java 11 появилась возможность исполнять файл с классами без предварительной компиляции. Об этом есть отличная статья на CodeFX.</summary></entry><entry><title type="html">Инцидент с Гитхаб</title><link href="http://yamakarov.ru/github/high-availability/2018/11/06/github-fail.html" rel="alternate" type="text/html" title="Инцидент с Гитхаб" /><published>2018-11-06T16:09:00+03:00</published><updated>2018-11-06T16:09:00+03:00</updated><id>http://yamakarov.ru/github/high-availability/2018/11/06/github-fail</id><content type="html" xml:base="http://yamakarov.ru/github/high-availability/2018/11/06/github-fail.html">&lt;p&gt;Перевод статьи про то как &lt;a href=&quot;https://habr.com/post/428409/&quot;&gt;Github упал 21 октября 2018&lt;/a&gt;.
Сервис был недоступен 24 часа и основное время ушло на восстановление данных из бэкапов и применение накопившихся изменений.
Без бекапов не получалось обойтись, потому что появились 2 мастера, которые содержали несогласованные изменения.
Ни на один из кластеров было нельзя накатить изменения с другого.&lt;/p&gt;</content><author><name></name></author><summary type="html">Перевод статьи про то как Github упал 21 октября 2018. Сервис был недоступен 24 часа и основное время ушло на восстановление данных из бэкапов и применение накопившихся изменений. Без бекапов не получалось обойтись, потому что появились 2 мастера, которые содержали несогласованные изменения. Ни на один из кластеров было нельзя накатить изменения с другого.</summary></entry><entry><title type="html">Аннотированная версия статьи про биткоин</title><link href="http://yamakarov.ru/papers/2018/11/02/fermat-bitcoin.html" rel="alternate" type="text/html" title="Аннотированная версия статьи про биткоин" /><published>2018-11-02T18:14:00+03:00</published><updated>2018-11-02T18:14:00+03:00</updated><id>http://yamakarov.ru/papers/2018/11/02/fermat-bitcoin</id><content type="html" xml:base="http://yamakarov.ru/papers/2018/11/02/fermat-bitcoin.html">&lt;p&gt;Мне очень нравится идея сопровождать комментариями известные статьи и давать перекрестные ссылки и пояснения.
Отличный пример &lt;a href=&quot;https://fermatslibrary.com/s/bitcoin&quot;&gt;статья про Bitcoin&lt;/a&gt;, который скоро отпразднует свое десятилетие.
Как жаль, что я вовремя не закупился и не знаю время ли сейчас.&lt;/p&gt;</content><author><name></name></author><summary type="html">Мне очень нравится идея сопровождать комментариями известные статьи и давать перекрестные ссылки и пояснения. Отличный пример статья про Bitcoin, который скоро отпразднует свое десятилетие. Как жаль, что я вовремя не закупился и не знаю время ли сейчас.</summary></entry></feed>