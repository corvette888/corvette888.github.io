<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="http://yamakarov.ru/feed.xml" rel="self" type="application/atom+xml" /><link href="http://yamakarov.ru/" rel="alternate" type="text/html" /><updated>2018-08-13T14:30:33+03:00</updated><id>http://yamakarov.ru/</id><title type="html">Записки Java программиста</title><subtitle>Блог о разработке web админок, CRM-ок и прочего. 
</subtitle><entry><title type="html">one-nio: компилируем Java на лету</title><link href="http://yamakarov.ru/java/one-nio/2018/08/13/compile-java.html" rel="alternate" type="text/html" title="one-nio: компилируем Java на лету" /><published>2018-08-13T14:06:00+03:00</published><updated>2018-08-13T14:06:00+03:00</updated><id>http://yamakarov.ru/java/one-nio/2018/08/13/compile-java</id><content type="html" xml:base="http://yamakarov.ru/java/one-nio/2018/08/13/compile-java.html">&lt;p&gt;В библиотеке &lt;a href=&quot;https://github.com/odnoklassniki/one-nio&quot;&gt;one-nio&lt;/a&gt; есть возможность компилировать Java код на лету.
Это может быть нужно, когда вы хотите дать пользователю возможность задавать формулы для вычисления значений.
Как-то мне нужно было посчитать вес тасков для отдачи пользователям по сложной формуле, которая зависела от квалификации пользователя и типа таска.
Я решил эту задачу используя встроенный в jvm движок &lt;a href=&quot;https://docs.oracle.com/javase/10/nashorn/toc.htm&quot;&gt;Nashorn&lt;/a&gt;.
Писал куски кода на Javascript, компилировал и запускал в программе.&lt;/p&gt;

&lt;p&gt;Можно обойтись без Javascript, если писать и компилировать прямо Java код:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ru&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;yamakarov&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;one.nio.compiler.CompilationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;one.nio.compiler.Javac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;one.nio.gen.BytecodeGenerator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FunctionScript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompilationException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;package ru.yamakarov.gen;\n&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;\n&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;public class GeneratedScales extends Scales {\n&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;    public int weight (Context context) {\n&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;        return %s;\n&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;    }\n&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;functionStr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;context.multiplier * 10&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Javac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;functionStr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Scales&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myScales&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BytecodeGenerator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;instantiate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scales&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myScales&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Можно писать в файле или в базе данных код функции:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;String functionStr = &quot;context.multiplier * 10&quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Подставлять его в шаблон, расширяющий класс &lt;code class=&quot;highlighter-rouge&quot;&gt;Scales&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ru&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;yamakarov&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Scales&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Итоговый экземпляр &lt;code class=&quot;highlighter-rouge&quot;&gt;myScales&lt;/code&gt; можно сохранять для повторного использования, чтобы сократить время вызова.
Также в &lt;code class=&quot;highlighter-rouge&quot;&gt;context&lt;/code&gt; можно передавать и другие параметры, кроме использованного мною &lt;code class=&quot;highlighter-rouge&quot;&gt;multiplier&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ru&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;yamakarov&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multiplier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multiplier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;multiplier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multiplier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Я не проверял, но такой способ должен работать быстрее использования javascript движка, будет поддерживать jit оптимизации, в случае частого вызова метода, который был получен от пользователя и больше мне нравится.&lt;/p&gt;</content><author><name></name></author><summary type="html">В библиотеке one-nio есть возможность компилировать Java код на лету. Это может быть нужно, когда вы хотите дать пользователю возможность задавать формулы для вычисления значений. Как-то мне нужно было посчитать вес тасков для отдачи пользователям по сложной формуле, которая зависела от квалификации пользователя и типа таска. Я решил эту задачу используя встроенный в jvm движок Nashorn. Писал куски кода на Javascript, компилировал и запускал в программе.</summary></entry><entry><title type="html">Доказательство корретности программ</title><link href="http://yamakarov.ru/cs/2018/08/10/program-proofs.html" rel="alternate" type="text/html" title="Доказательство корретности программ" /><published>2018-08-10T17:18:00+03:00</published><updated>2018-08-10T17:18:00+03:00</updated><id>http://yamakarov.ru/cs/2018/08/10/program-proofs</id><content type="html" xml:base="http://yamakarov.ru/cs/2018/08/10/program-proofs.html">&lt;p&gt;Я знаю несколько способов убедиться в корректности программы:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Провести тестирование&lt;/li&gt;
  &lt;li&gt;Провести мысленный эксперимент с целью понять как программа работает&lt;/li&gt;
  &lt;li&gt;Строго доказать корректность программы, на основе теорем выведенных из аксиом&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;На практике я применяю первый два способа.
Хочется ввести в свой арсенал и третий способ, но этот зверь очень сложен и требует определенного склада ума.&lt;/p&gt;

&lt;p&gt;Почему мне хочется строго доказывать корректность программы?
Это есть простое объяснение. 
Тестирование и мысленные эксперименты не работают.
Мысленный эксперимент в моем случае не работает совсем и подводит в 90% случаев.
На практике получается, что пока не запустишь программу сказать будет ли она работать или нет нельзя.&lt;/p&gt;

&lt;p&gt;Тестирование тоже не работает довольно часто. 
Оно удобно для сокращения времени запуска программы, и тем самым ускоряет разработку, но не решает проблем с ошибками в программе.
Ошибки все равно остаются, и в большом количестве, причем может создаться впечатление, что вы достаточно хорошо покрыли программу тестами, но это смею вас заверить не так, ну или я просто не умею писать тесты.
Из своего опыта я не заметил корреляции между способностями программиста и тем пишет ли он качественный код. 
Плохие программисты пишут и не пишут тесты. Также и хорошие программисты пишут и не пишут тесты.
Я для себя решил писать некоторое количество тестов, особенно если это какие-то сложные вычисления.
Еще одна проблема с тестами, то что как и код и надо поддерживать.&lt;/p&gt;

&lt;p&gt;Так как два способа написания программ без ошибок в моем случае не работают, я хочу попробовать третий. 
В надежде, что он станет серебряной пулей. 
Что, конечно, не так, не станет.
Самый базовый способ доказательства корректности это использование статически типизированных языков.
Я использую Java и Typescript, еще Dart, но с ним как-то у меня плохие отношения, не нравится совсем.
Типизация спасает от дурацких ошибок и помогает при рефакторинге, но работает при правильном проектировании программы.
Если вы повсюду используете ассоциативные массивы, в виде HashMap или чего-то подобного, никакая типизация вас не спасет.
Опять же в Java типизация не спасает от самой распространенной ошибки NullPointerException.&lt;/p&gt;

&lt;p&gt;Можно не ограничиваться доказательством соответствия типов переменных, а пойти дальше и следуя Флойду, Лампорту и Хоару доказывать корректность программ строго математически.
И на самом деле, это обязательно делать в случае многопоточных программ. 
В программах, выполняемых в нескольких потоках вообще очень плохой работает мысленный эксперимент и еще хуже работают тесты.
Проблема с доказательством в том, что формальные доказательства очень длинные и не владея методом практически невозможно прийти к методике. 
Надо знать требования к строгости доказательства и уметь строить доказательства, а этому в большинстве вузов не учат. 
Во всяком случае, средний студент по моему опыту этим не владеет. 
В строго доказанной программе могут быть ошибки, но они довольно быстро находятся. 
Я верю Дейкстре, который смог полностью доказать даже такую большую программу, как операционная система.
Дейкстра утверждал, что в его ос, ошибки были либо простыми опечатками, либо очень быстро фиксились из-за того, что явно противоречили ходу доказательства.&lt;/p&gt;</content><author><name></name></author><summary type="html">Я знаю несколько способов убедиться в корректности программы: Провести тестирование Провести мысленный эксперимент с целью понять как программа работает Строго доказать корректность программы, на основе теорем выведенных из аксиом</summary></entry><entry><title type="html">Онлайн конструктор графиков</title><link href="http://yamakarov.ru/idea/2018/08/09/graph-creator.html" rel="alternate" type="text/html" title="Онлайн конструктор графиков" /><published>2018-08-09T17:49:00+03:00</published><updated>2018-08-09T17:49:00+03:00</updated><id>http://yamakarov.ru/idea/2018/08/09/graph-creator</id><content type="html" xml:base="http://yamakarov.ru/idea/2018/08/09/graph-creator.html">&lt;p&gt;Сегодня по дороге на работу в голову пришла мысль, которой я захотел поделиться.
С помощью библиотеки &lt;a href=&quot;https://www.highcharts.com/&quot;&gt;Highcharts&lt;/a&gt; можно строить &lt;a href=&quot;https://www.highcharts.com/demo&quot;&gt;красивые графики&lt;/a&gt;.
Кроме этого эта библиотека умеет сохранять графики в файл, которые потом можно вставлять на свою страницу.
Я хотел сделать свой конструктор, но вовремя нашел, что есть &lt;a href=&quot;https://cloud.highcharts.com/&quot;&gt;Highcharts Cloud&lt;/a&gt; и туда можно заливать свои данные и строить графики.&lt;/p&gt;

&lt;p&gt;К примеру, скачаем данные о &lt;a href=&quot;http://www.gks.ru/wps/wcm/connect/rosstat_main/rosstat/ru/statistics/ftrade/#&quot;&gt;внешней торговле РФ&lt;/a&gt; с сайта Росстата и вот какой график у нас получится:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://yamakarov.ru/img/rf_trade_balance.png&quot; alt=&quot;Внешняя торговля РФ&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Сегодня по дороге на работу в голову пришла мысль, которой я захотел поделиться. С помощью библиотеки Highcharts можно строить красивые графики. Кроме этого эта библиотека умеет сохранять графики в файл, которые потом можно вставлять на свою страницу. Я хотел сделать свой конструктор, но вовремя нашел, что есть Highcharts Cloud и туда можно заливать свои данные и строить графики.</summary></entry><entry><title type="html">Работа со временем в программах</title><link href="http://yamakarov.ru/time/2018/08/08/time.html" rel="alternate" type="text/html" title="Работа со временем в программах" /><published>2018-08-08T16:53:00+03:00</published><updated>2018-08-08T16:53:00+03:00</updated><id>http://yamakarov.ru/time/2018/08/08/time</id><content type="html" xml:base="http://yamakarov.ru/time/2018/08/08/time.html">&lt;p&gt;Работая программистом я много провозился с разбирательством, почему то или иное время показывается не так, как надо.
И это при том, что я никогда не работал с программным обеспечением, которое должно поддерживать несколько временных зон.
Зона всегда одна, московская.&lt;/p&gt;

&lt;p&gt;Сегодня надо было опять разобраться в том, какое время в заливаемых данных, какое хранится в базе, какое используется в северной обработке и какое отображается в клиентском графике.&lt;/p&gt;

&lt;p&gt;Сначала я определился, что время оно более менее одно, если не учитывать вращение земли и атомные часы.
Наверно, это важно в космических приложениях, но для меня достаточно, что есть универсальное время &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%92%D1%81%D0%B5%D0%BC%D0%B8%D1%80%D0%BD%D0%BE%D0%B5_%D0%BA%D0%BE%D0%BE%D1%80%D0%B4%D0%B8%D0%BD%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D0%BE%D0%B5_%D0%B2%D1%80%D0%B5%D0%BC%D1%8F&quot;&gt;UTC&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Грубо говоря, это количество секунд с начала 1970 года в определенной точке Земли, так как год наступает в разное время в разных точках.
Владивосток празднует Новый Год на 9 часов раньше Москвы.
Количество пройденных секунд с той секунды, когда 1970 год на Гринвическом Меридиане наступил во всем мире одинаковое.
С ним легко работать и никаких разночтений быть не может.
Правда, для других временных зон его не удобно читать, поэтому при отображении универсального времени пользователю его надо конвертировать в локальное время.
Поняв это я довольно быстро согласовал время в моей программе:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;При заливке московского локального времени, я удостоверился что оно корректно конвертируется в универсальное время&lt;/li&gt;
  &lt;li&gt;Проверил, что в базе хранится универсальное время&lt;/li&gt;
  &lt;li&gt;Серверную обработку настроил на работу с универсальным временем, так как отступы от начала дня задавались часами по Москве, поменял вычисление представлений локального времени&lt;/li&gt;
  &lt;li&gt;Поправил клиент, чтобы он отрисовывал Московское время&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Чтобы не путаться, нужно помнить что есть одно универсальное время. 
А путаница с временами проистекает исключительно из разных представлений универсального времени.&lt;/p&gt;</content><author><name></name></author><summary type="html">Работая программистом я много провозился с разбирательством, почему то или иное время показывается не так, как надо. И это при том, что я никогда не работал с программным обеспечением, которое должно поддерживать несколько временных зон. Зона всегда одна, московская.</summary></entry><entry><title type="html">utf-8</title><link href="http://yamakarov.ru/utf8/2018/08/07/utf8.html" rel="alternate" type="text/html" title="utf-8" /><published>2018-08-07T16:04:00+03:00</published><updated>2018-08-07T16:04:00+03:00</updated><id>http://yamakarov.ru/utf8/2018/08/07/utf8</id><content type="html" xml:base="http://yamakarov.ru/utf8/2018/08/07/utf8.html">&lt;p&gt;Вчера за ужином обсуждали переход Казахстана, Узбекистана и Киргизии на латиницу.
Я высказал мысль, что если бы все перешли на латиницу, то мир бы сэкономил много электричества, потому что латиница требует для хранения один байт, а для хранения всякий других, например кириллических символов требуется два байта.
Я к своему стыду считал, что из-за того, что пользуюсь кодировкой &lt;a href=&quot;https://ru.wikipedia.org/wiki/UTF-8&quot;&gt;utf-8&lt;/a&gt;, трачу на хранение html в 2 раза больше байтов.
Однако если пойти по ссылке, можно узнать что utf-8 совсем не так прост и английские символы занимают в нем всего один байт, а под кириллицу уходит два.
Так html страница часто состоит только из английских символов, непосредственно разметки, использование utf-8 существенно не увеличивает размер, зато позволяет людям забыть о выборе кодировки.&lt;/p&gt;

&lt;p&gt;Спасибо &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%A2%D0%BE%D0%BC%D0%BF%D1%81%D0%BE%D0%BD,_%D0%9A%D0%B5%D0%BD&quot;&gt;Кену Томпсону&lt;/a&gt; и &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%9F%D0%B0%D0%B9%D0%BA,_%D0%A0%D0%BE%D0%B1&quot;&gt;Робу Пайку&lt;/a&gt; за то, что придумали формат, которые позволяет людям без особых потерь писать тексты на родных языках.&lt;/p&gt;

&lt;p&gt;И теперь я не вижу поводов в странах СНГ переходить с кириллицы на латиницу.&lt;/p&gt;</content><author><name></name></author><summary type="html">Вчера за ужином обсуждали переход Казахстана, Узбекистана и Киргизии на латиницу. Я высказал мысль, что если бы все перешли на латиницу, то мир бы сэкономил много электричества, потому что латиница требует для хранения один байт, а для хранения всякий других, например кириллических символов требуется два байта. Я к своему стыду считал, что из-за того, что пользуюсь кодировкой utf-8, трачу на хранение html в 2 раза больше байтов. Однако если пойти по ссылке, можно узнать что utf-8 совсем не так прост и английские символы занимают в нем всего один байт, а под кириллицу уходит два. Так html страница часто состоит только из английских символов, непосредственно разметки, использование utf-8 существенно не увеличивает размер, зато позволяет людям забыть о выборе кодировки.</summary></entry><entry><title type="html">Эффективные хэш таблицы</title><link href="http://yamakarov.ru/hash/trie/2018/08/06/trie.html" rel="alternate" type="text/html" title="Эффективные хэш таблицы" /><published>2018-08-06T11:52:00+03:00</published><updated>2018-08-06T11:52:00+03:00</updated><id>http://yamakarov.ru/hash/trie/2018/08/06/trie</id><content type="html" xml:base="http://yamakarov.ru/hash/trie/2018/08/06/trie.html">&lt;p&gt;Есть такая структура &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%B5%D1%84%D0%B8%D0%BA%D1%81%D0%BD%D0%BE%D0%B5_%D0%B4%D0%B5%D1%80%D0%B5%D0%B2%D0%BE&quot;&gt;префиксное дерево&lt;/a&gt;.
Для него Фил Бэгвел придумал очень хорошую реализацию &lt;a href=&quot;http://lampwww.epfl.ch/papers/triesearches.pdf.gz&quot;&gt;AMT&lt;/a&gt;.
Но в ней искать можно только по строке, что не всегда удобно. 
Часто хочется класть в мапу любой тип в качестве ключа.
Поэтому Фил придумал следующую реализацию &lt;a href=&quot;https://lampwww.epfl.ch/papers/idealhashtrees.pdf&quot;&gt;HAMT&lt;/a&gt;.
Его идею подхватили и сделали успешную реализацию &lt;a href=&quot;https://michael.steindorfer.name/publications/oopsla15.pdf&quot;&gt;HAMT на Java&lt;/a&gt;.
Обзор последней можно почитать у &lt;a href=&quot;https://blog.acolyer.org/2015/11/27/hamt/&quot;&gt;Кольера&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Очень интересная тема, осталось понять почему этого добра до сих пор нет в стандартной библиотеке.&lt;/p&gt;</content><author><name></name></author><summary type="html">Есть такая структура префиксное дерево. Для него Фил Бэгвел придумал очень хорошую реализацию AMT. Но в ней искать можно только по строке, что не всегда удобно. Часто хочется класть в мапу любой тип в качестве ключа. Поэтому Фил придумал следующую реализацию HAMT. Его идею подхватили и сделали успешную реализацию HAMT на Java. Обзор последней можно почитать у Кольера.</summary></entry><entry><title type="html">Гетерогенные коллекции в Java</title><link href="http://yamakarov.ru/java/2018/08/03/heterogenous-collections.html" rel="alternate" type="text/html" title="Гетерогенные коллекции в Java" /><published>2018-08-03T17:57:00+03:00</published><updated>2018-08-03T17:57:00+03:00</updated><id>http://yamakarov.ru/java/2018/08/03/heterogenous-collections</id><content type="html" xml:base="http://yamakarov.ru/java/2018/08/03/heterogenous-collections.html">&lt;p&gt;Сегодня наткнулся в Spring на класс &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/ParameterizedTypeReference.html&quot;&gt;ParameterizedTypeReference&lt;/a&gt;, который позволяет сохранять информацию об обобщенных типах. 
Javadoc к этому классу отправляет за подробностями в блог &lt;a href=&quot;http://gafter.blogspot.com/2006/12/super-type-tokens.html&quot;&gt;Нила Гафтера&lt;/a&gt;.
Там я и нашел пример гетерогеносных коллекций, таких в которые можно складывать разные типы данных и при этом типобезопасно.
Что мне позволило написать простенький пример в тематике баз данных:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ru&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;yamakarov&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;examples&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HeterogenousCollection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addresses&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Row&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// В id можно положить только число&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// В name можно положить только строку&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Yakov&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Можно класть не только reifable типы&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addresses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Питер&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Москва&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doubleValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addresses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;К сожалению я не до конца понимаю, работает это или нет. К тому же хочется как то заставить компилятор ругаться при попытке взять из ряда колонку, которой там не может быть.&lt;/p&gt;</content><author><name></name></author><summary type="html">Сегодня наткнулся в Spring на класс ParameterizedTypeReference, который позволяет сохранять информацию об обобщенных типах. Javadoc к этому классу отправляет за подробностями в блог Нила Гафтера. Там я и нашел пример гетерогеносных коллекций, таких в которые можно складывать разные типы данных и при этом типобезопасно. Что мне позволило написать простенький пример в тематике баз данных:</summary></entry><entry><title type="html">Как фиксить баги</title><link href="http://yamakarov.ru/software/2018/08/02/troubleshooting.html" rel="alternate" type="text/html" title="Как фиксить баги" /><published>2018-08-02T20:09:00+03:00</published><updated>2018-08-02T20:09:00+03:00</updated><id>http://yamakarov.ru/software/2018/08/02/troubleshooting</id><content type="html" xml:base="http://yamakarov.ru/software/2018/08/02/troubleshooting.html">&lt;p&gt;Современное программное обеспечение содержит много багов.
Программисты по мере сил их исправляют.
Приходится это делать и мне.
Самые легкие баги легко воспроизводятся людьми.
Я могу их воспроизвести в тестах и поправить код.&lt;/p&gt;

&lt;p&gt;Есть более серьезные насекомые.
Это когда вообще не понятно, что происходит.
Тогда я стараюсь придерживаться следующей последовательности действий.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Читаем код поломавшегося приложения, если понятно где есть ошибка, ее можно покрыть тестами и исправить.&lt;/li&gt;
  &lt;li&gt;Часто после чтения кода остаешься в недоумении. Все должно работать и так. Но не работает.&lt;/li&gt;
  &lt;li&gt;Тогда надо подключаться и дебажить код. В дебаге можно найти почти все, кроме проблем с параллельным выполнением потоков. Но продакшен систему не подебажишь, из-за того, что ее нельзя останавливать.&lt;/li&gt;
  &lt;li&gt;И тогда нам на помощь приходят логи, которые кстати можно читать до чтения кода. И которые помогают быстро найти нужные участки кода. Я дописываю недостающие информацию для выведения в логи. Писать логи это огромное искусство, делая это идешь по лезвию бритвы. Слишком мало логов, не разобраться что происходит. Слишком много логов невозможно разумно обработать, особенно если вы ищете ошибку на тысячи серверов.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Очень важно не зависать на чтение кода программы, надо активно диагностировать проблему. Дебажить, добавлять логи, писать тесты. 
Это ускоряет понимание.&lt;/p&gt;</content><author><name></name></author><summary type="html">Современное программное обеспечение содержит много багов. Программисты по мере сил их исправляют. Приходится это делать и мне. Самые легкие баги легко воспроизводятся людьми. Я могу их воспроизвести в тестах и поправить код.</summary></entry><entry><title type="html">Тесты производительности</title><link href="http://yamakarov.ru/java/jmh/2018/08/01/benchmarks.html" rel="alternate" type="text/html" title="Тесты производительности" /><published>2018-08-01T12:59:00+03:00</published><updated>2018-08-01T12:59:00+03:00</updated><id>http://yamakarov.ru/java/jmh/2018/08/01/benchmarks</id><content type="html" xml:base="http://yamakarov.ru/java/jmh/2018/08/01/benchmarks.html">&lt;p&gt;В мире придумано уже очень много алгоритмов.
Все они в том или ином виде реализованы в языках программирования и хранятся в библиотеках.
Все кто использует стандартную библиотеку получают более менее стандартный результат.
Многие люди стараются превзойти этот результат и написать более быстрые алгоритмы или более эффективные.
Для того, чтобы сравнить два алгоритма, надо проводить тестирование производительности.
Это довольно сложная тема, о которой много пишет &lt;a href=&quot;https://shipilev.net/&quot;&gt;Шипилев&lt;/a&gt;.
Он же является ответственным за инструмент для проведения бенчмарков на java &lt;a href=&quot;http://openjdk.java.net/projects/code-tools/jmh/&quot;&gt;JMH&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Документации по JMH довольно мало.
Я нашел следующие источники информации:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://shipilev.net/&quot;&gt;Доклады&lt;/a&gt; Шипилева&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/search?q=jmh&quot;&gt;Stackoverflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/&quot;&gt;Примеры из исходников&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Это позволило мне написать свой первый простой и возможно не очень показательный бенчмарк:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ru&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;yamakarov&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.TreeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.openjdk.jmh.annotations.Benchmark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.openjdk.jmh.annotations.Scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.openjdk.jmh.annotations.State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.openjdk.jmh.runner.Runner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.openjdk.jmh.runner.RunnerException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.openjdk.jmh.runner.options.Options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.openjdk.jmh.runner.options.OptionsBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JavaMapBenchmark&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITEM_COUNT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Benchmark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BenchMarkState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;treeMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BenchMarkState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITEM_COUNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;treeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;hashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITEM_COUNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Benchmark&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testTreeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BenchMarkState&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;treeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


    &lt;span class=&quot;nd&quot;&gt;@Benchmark&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testHashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BenchMarkState&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RunnerException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Options&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OptionsBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JavaMapBenchmark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSimpleName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Runner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Я получил следующий результат:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Benchmark                      Mode  Cnt         Score        Error  Units
JavaMapBenchmark.testHashMap  thrpt    5  16778578.614 ± 901741.764  ops/s
JavaMapBenchmark.testTreeMap  thrpt    5   6345125.655 ± 335465.052  ops/s
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Таким образом в моем случае get в HashMap быстрее чем в TreeMap.&lt;/p&gt;

&lt;p&gt;Какие вопросы я оставил без ответа:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;State и как с ним правильно работать в бенчмарке&lt;/li&gt;
  &lt;li&gt;Настройки запуски бенчмарка с помощью аннотаций&lt;/li&gt;
  &lt;li&gt;Интерпретация результатов бенчмарка, что значат все эти Mode, Cnt, Score, Error, Units.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">В мире придумано уже очень много алгоритмов. Все они в том или ином виде реализованы в языках программирования и хранятся в библиотеках. Все кто использует стандартную библиотеку получают более менее стандартный результат. Многие люди стараются превзойти этот результат и написать более быстрые алгоритмы или более эффективные. Для того, чтобы сравнить два алгоритма, надо проводить тестирование производительности. Это довольно сложная тема, о которой много пишет Шипилев. Он же является ответственным за инструмент для проведения бенчмарков на java JMH.</summary></entry><entry><title type="html">Процессор: предсказание ветвления</title><link href="http://yamakarov.ru/processors/2018/07/31/branch-prediction.html" rel="alternate" type="text/html" title="Процессор: предсказание ветвления" /><published>2018-07-31T12:24:00+03:00</published><updated>2018-07-31T12:24:00+03:00</updated><id>http://yamakarov.ru/processors/2018/07/31/branch-prediction</id><content type="html" xml:base="http://yamakarov.ru/processors/2018/07/31/branch-prediction.html">&lt;p&gt;Современные процессоры обладают конвейерной архитектурой.
Это означает, что каждая ассемблерная операция разбивается на несколько микроопераций.
В свою очередь микрооперации последовательно выполняются на разных устройствах процессора.
Одновременно процессор может выполнять несколько операций.
Лишь бы только они не зависели друг от друга.
Зависимость заключается в том, что для выполнения следующей операции требуются данные предыдущей операции.
С этой зависимостью ничего нельзя сделать на уровне процессора, можно только распаралелить программу.
Но можно попытаться начать заранее выполнять ветви исполнения.
Для этого, предсказывается результат ветвления и процессор исполняет код по ветви.
Если предсказание оказывается неправильным, результаты вычислений отбрасываются и мы теряем в производительности.&lt;/p&gt;

&lt;p&gt;О том как различные процессоры предсказывают ветвления можно прочитать у &lt;a href=&quot;https://www.agner.org/optimize/microarchitecture.pdf&quot;&gt;Агнера Фога&lt;/a&gt;. 
Этот материал предназначен для писателей компиляторов, для общего ознакомления читать мануал довольно скучно, много повторяющихся моментов для разных процессоров.
Материал изложен очень кратко и сжато.&lt;/p&gt;

&lt;p&gt;Гораздо более захватывающим мне показался &lt;a href=&quot;https://stackoverflow.com/questions/11227809/why-is-it-faster-to-process-a-sorted-array-than-an-unsorted-array&quot;&gt;вопрос про массивы&lt;/a&gt; на stackoverflow.
В ветке обсуждения много хаков, которые можно использовать для уменьшения ветвления в программе. 
Присутствуют ссылки на интересненые материалы и статьи. 
Основной посыл в том, что заботиться о сбросе конвейера нужно только в критических секциях кода.
Эти секции лучше не искать на глазок, а пользоваться инструментами, профилировщиками.&lt;/p&gt;</content><author><name></name></author><summary type="html">Современные процессоры обладают конвейерной архитектурой. Это означает, что каждая ассемблерная операция разбивается на несколько микроопераций. В свою очередь микрооперации последовательно выполняются на разных устройствах процессора. Одновременно процессор может выполнять несколько операций. Лишь бы только они не зависели друг от друга. Зависимость заключается в том, что для выполнения следующей операции требуются данные предыдущей операции. С этой зависимостью ничего нельзя сделать на уровне процессора, можно только распаралелить программу. Но можно попытаться начать заранее выполнять ветви исполнения. Для этого, предсказывается результат ветвления и процессор исполняет код по ветви. Если предсказание оказывается неправильным, результаты вычислений отбрасываются и мы теряем в производительности.</summary></entry></feed>