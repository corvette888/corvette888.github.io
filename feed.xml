<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="http://yamakarov.ru/feed.xml" rel="self" type="application/atom+xml" /><link href="http://yamakarov.ru/" rel="alternate" type="text/html" /><updated>2018-10-08T13:06:52+03:00</updated><id>http://yamakarov.ru/</id><title type="html">Записки Java программиста</title><subtitle>Блог о разработке web админок, CRM-ок и прочего. 
</subtitle><entry><title type="html">Про научные исследования</title><link href="http://yamakarov.ru/research/2018/10/08/research.html" rel="alternate" type="text/html" title="Про научные исследования" /><published>2018-10-08T13:05:00+03:00</published><updated>2018-10-08T13:05:00+03:00</updated><id>http://yamakarov.ru/research/2018/10/08/research</id><content type="html" xml:base="http://yamakarov.ru/research/2018/10/08/research.html">&lt;p&gt;Вдохновляющий пост про то, что любой может &lt;a href=&quot;http://www.bailis.org/blog/you-can-do-research-too/&quot;&gt;попробовать себя в науке&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">Вдохновляющий пост про то, что любой может попробовать себя в науке.</summary></entry><entry><title type="html">Структура хорошей статьи</title><link href="http://yamakarov.ru/captain/2018/10/05/article-structure.html" rel="alternate" type="text/html" title="Структура хорошей статьи" /><published>2018-10-05T17:04:00+03:00</published><updated>2018-10-05T17:04:00+03:00</updated><id>http://yamakarov.ru/captain/2018/10/05/article-structure</id><content type="html" xml:base="http://yamakarov.ru/captain/2018/10/05/article-structure.html">&lt;p&gt;Хорошая статья обычно содержит следующие части:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Краткое содержание или обзор, для того, чтобы читатель сразу мог понять стоит ли вообще читать статью или затронутая тема совсем не интересна&lt;/li&gt;
  &lt;li&gt;Введение, чтобы человек мог понять уровень на котором будет идти изложение, и если он слишком сложный мог прочитать предварительные материалы&lt;/li&gt;
  &lt;li&gt;Содержательные факты, непосредственно вещи которые автору удалось узнать и о которых он хочет проинформировать читателя&lt;/li&gt;
  &lt;li&gt;Обсуждение полученных фактов, изложение полученных из фактов выводов&lt;/li&gt;
  &lt;li&gt;Замечания по дальнейшим направлениям исследования&lt;/li&gt;
  &lt;li&gt;Заключение, в котором приводятся выводы и подводится итог статьи&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Хорошая статья обычно содержит следующие части:</summary></entry><entry><title type="html">NewSQL базы данных</title><link href="http://yamakarov.ru/newsql/2018/10/04/newsql.html" rel="alternate" type="text/html" title="NewSQL базы данных" /><published>2018-10-04T18:41:00+03:00</published><updated>2018-10-04T18:41:00+03:00</updated><id>http://yamakarov.ru/newsql/2018/10/04/newsql</id><content type="html" xml:base="http://yamakarov.ru/newsql/2018/10/04/newsql.html">&lt;p&gt;Очень интересная подборка ссылок на &lt;a href=&quot;http://smalldatum.blogspot.com/2018/10/transaction-processing-in-newsql.html&quot;&gt;NewSQL базы данных&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Очень интересная подборка ссылок на NewSQL базы данных</summary></entry><entry><title type="html">Теория вероятностей</title><link href="http://yamakarov.ru/probability/2018/10/03/probability.html" rel="alternate" type="text/html" title="Теория вероятностей" /><published>2018-10-03T18:00:00+03:00</published><updated>2018-10-03T18:00:00+03:00</updated><id>http://yamakarov.ru/probability/2018/10/03/probability</id><content type="html" xml:base="http://yamakarov.ru/probability/2018/10/03/probability.html">&lt;p&gt;Сегодня с коллегой обсуждали интересный факт из теории вероятностей &lt;a href=&quot;https://fermatslibrary.com/s/pick-the-largest-number&quot;&gt;про выбор наибольшего числа&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Задача чем-то напоминает задачу о &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0_%D0%BE_%D0%B4%D0%B2%D1%83%D1%85_%D0%BA%D0%BE%D0%BD%D0%B2%D0%B5%D1%80%D1%82%D0%B0%D1%85&quot;&gt;двух конвертах&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Я даже написал симулятор на kotlin:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ru.yamakarov&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.commons.math3.distribution.UniformRealDistribution&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.0&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10000&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UniformRealDistribution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX_VALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX_VALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Оказалось, что выбирать при выборе t случайным образом вероятность где-то 0.67, а если брать середину интервала 
то получается 0.75&lt;/p&gt;

&lt;p&gt;И тут я не понял как моделировать бесконечные числа на компьютере.
Вероятность выбрать число среди бесконечного числа возможностей равна 0, а среди конечного пусть маленькая, но отличная от ноля.
И стратегия с 0 на бесконечном интервале не должна работать, однако я не нашел способа это проверить.&lt;/p&gt;</content><author><name></name></author><summary type="html">Сегодня с коллегой обсуждали интересный факт из теории вероятностей про выбор наибольшего числа.</summary></entry><entry><title type="html">Как подключить LaTeX к Jekyll</title><link href="http://yamakarov.ru/jekyll/latex/2018/10/02/latex.html" rel="alternate" type="text/html" title="Как подключить LaTeX к Jekyll" /><published>2018-10-02T17:44:00+03:00</published><updated>2018-10-02T17:44:00+03:00</updated><id>http://yamakarov.ru/jekyll/latex/2018/10/02/latex</id><content type="html" xml:base="http://yamakarov.ru/jekyll/latex/2018/10/02/latex.html">&lt;p&gt;Я продолжаю осваивать Jekyll и чтобы можно было писать более содержательные статьи, решил разобраться с тем как подключить LaTeX для написания формул.
Содержательность в данном случае измеряется в количестве математических формул.
Ведь нельзя же что-то доказать, не приведя ни одной формулы и не запудрив читателю мозги.&lt;/p&gt;

&lt;p&gt;Итак для того, чтобы вывести простейшую формулу:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;E = mc^2&lt;/script&gt;

&lt;p&gt;Надо написать &lt;code class=&quot;highlighter-rouge&quot;&gt;$$ E = mc^2 $$&lt;/code&gt;, знак доллара пишется 2 раза так как Markdown один убирает.
Также я подключил библиотеку &lt;a href=&quot;https://www.mathjax.org/&quot;&gt;MathJax&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot; type=&quot;text/javascript&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Для этого я скопировал из темы minima, которую можно найти так:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle show minima
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Файл &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes/head.html&lt;/code&gt; и прописал там свой скрипт.
Я кастомизирую Jekyll темы копирую в свою папку нужные файлы из общей темы и переопределяя их.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Viola!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Пост написан на основе &lt;a href=&quot;http://www.iangoodfellow.com/blog/jekyll/markdown/tex/2016/11/07/latex-in-markdown.html&quot;&gt;найденного в интернете&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">Я продолжаю осваивать Jekyll и чтобы можно было писать более содержательные статьи, решил разобраться с тем как подключить LaTeX для написания формул. Содержательность в данном случае измеряется в количестве математических формул. Ведь нельзя же что-то доказать, не приведя ни одной формулы и не запудрив читателю мозги.</summary></entry><entry><title type="html">Инлайнинг методов в Java</title><link href="http://yamakarov.ru/jvm/2018/10/01/method-inlining.html" rel="alternate" type="text/html" title="Инлайнинг методов в Java" /><published>2018-10-01T18:41:00+03:00</published><updated>2018-10-01T18:41:00+03:00</updated><id>http://yamakarov.ru/jvm/2018/10/01/method-inlining</id><content type="html" xml:base="http://yamakarov.ru/jvm/2018/10/01/method-inlining.html">&lt;p&gt;Я уже писал про &lt;a href=&quot;http://psy-lob-saw.blogspot.com&quot;&gt;отличный блог Нитсана Вакарта&lt;/a&gt;, посвященный внутренностям JVM.
Сегодня я хочу отметить ряд моментом в его &lt;a href=&quot;http://psy-lob-saw.blogspot.com/2018/07/how-inlined-code-confusing-profiles.html&quot;&gt;заметке про инлайнинг методов&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;В статье рассказывается, что такое инлайнинг, когда он работает и когда нет.
Пишется что плюсами является ускорение работы, за счет появления у компилятора возможности более агрессивно оптимизировать код и снятия накладных расходов на вызов метода.
К минусам относится увеличение размера исполняемого кода и в некоторых случаях уменьшение производительности из-за того, что компилятору приходится работать с большими частями кода.&lt;/p&gt;

&lt;p&gt;Написано о опциях JVM &lt;code class=&quot;highlighter-rouge&quot;&gt;-XX:+PrintInlining&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-XX:+PrintCompilation&lt;/code&gt; которые позволяют узнать какие методы скомпилированы и заинлайнены.&lt;/p&gt;

&lt;p&gt;В конце говорится о том, что итак сложный для понимания процесс превращения кода в инструкции для компьютера, становится экспоненциально сложнее с введением инлайнинга.&lt;/p&gt;</content><author><name></name></author><summary type="html">Я уже писал про отличный блог Нитсана Вакарта, посвященный внутренностям JVM. Сегодня я хочу отметить ряд моментом в его заметке про инлайнинг методов.</summary></entry><entry><title type="html">Немного о массивах в Kotlin</title><link href="http://yamakarov.ru/kotlin/2018/09/28/kotlin-array-2.html" rel="alternate" type="text/html" title="Немного о массивах в Kotlin" /><published>2018-09-28T17:41:00+03:00</published><updated>2018-09-28T17:41:00+03:00</updated><id>http://yamakarov.ru/kotlin/2018/09/28/kotlin-array-2</id><content type="html" xml:base="http://yamakarov.ru/kotlin/2018/09/28/kotlin-array-2.html">&lt;p&gt;Полгода назад я собирался &lt;a href=&quot;/kotlin/2018/04/08/kotlin-array.html&quot;&gt;разобраться&lt;/a&gt; с массивами в Kotlin.
Нельзя сказать, чтобы я разобрался, но у меня появилось несколько замечаний по этому поводу.
Возьмем простейший код:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ru.yamakarov.arrays&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Удобно, что не надо писать оператор &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;, очень приятная мелочь.
Не надо писать точек с запятой, и мы как бы не поражены раком точки с запятой.
Тип массива выводится из возвращаемого значения функции инициализатора.
Это очень классно придумано, не будет значений заполненных мусором. 
И не надо писать тип массива, он итак понятен, а значит, если я захочу поменять тим мне достаточно вы выражении возвращать другое значение.
В этом примере еще более удобном менять тип массива, потому что и &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;println&lt;/code&gt; принимают любые значения.&lt;/p&gt;

&lt;p&gt;Я посмотрел во что это все превращается и сделал генерацию байткода и декомпиляцию:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainKt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@NotNull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Intrinsics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;checkParameterIsNotNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size$iv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result$iv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size$iv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i$iv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result$iv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i$iv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i$iv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;result$iv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i$iv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result$iv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;i$iv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result$iv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i$iv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var13&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var13&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Тут видно что используется Java массив &lt;code class=&quot;highlighter-rouge&quot;&gt;String[]&lt;/code&gt;.
Если поменять инициализатор на возвращение &lt;code class=&quot;highlighter-rouge&quot;&gt;Int&lt;/code&gt; то будет использоваться &lt;code class=&quot;highlighter-rouge&quot;&gt;Integer[]&lt;/code&gt;.
Для того, чтобы работал &lt;code class=&quot;highlighter-rouge&quot;&gt;int[]&lt;/code&gt; надо использовать &lt;code class=&quot;highlighter-rouge&quot;&gt;IntArray&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Подводя итог, кажется что можно очень кратко писать и получать производительный код.&lt;/p&gt;</content><author><name></name></author><summary type="html">Полгода назад я собирался разобраться с массивами в Kotlin. Нельзя сказать, чтобы я разобрался, но у меня появилось несколько замечаний по этому поводу. Возьмем простейший код:</summary></entry><entry><title type="html">Ускоряем Jekyll с помощью Kotlin</title><link href="http://yamakarov.ru/kotlin/jekyll/2018/09/27/kotlin-jekyll.html" rel="alternate" type="text/html" title="Ускоряем Jekyll с помощью Kotlin" /><published>2018-09-27T18:24:00+03:00</published><updated>2018-09-27T18:24:00+03:00</updated><id>http://yamakarov.ru/kotlin/jekyll/2018/09/27/kotlin-jekyll</id><content type="html" xml:base="http://yamakarov.ru/kotlin/jekyll/2018/09/27/kotlin-jekyll.html">&lt;p&gt;Одним из первых постов в этот блог был пост про &lt;a href=&quot;/java/jekyll/2018/04/09/jekyll-boost.html&quot;&gt;ускорение работы с Jekyll с помощью Java&lt;/a&gt;.
Там я писал, что:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Я засек время потраченное на написание программы 34 минуты. Мне надо сделать около 50 постов, чтобы оно окупилось, и надо чтобы в программе не нашлось новых багов.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Я написал эти 50 постов. Сейчас в блоге 125 записей.
И эксперимент оказался очень &lt;a href=&quot;/commandline/2018/09/17/command-line-power.html&quot;&gt;удачным&lt;/a&gt;.
Я решил продолжить его перевести программу для генерации постов с Java на Kotlin.
Это оказалось очень просто, IntelliJ IDEA умеет делать это автоматически:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ru.yamakarov.jekyll&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.nio.file.FileSystems&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.nio.file.Files&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.text.SimpleDateFormat&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.*&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No command do nothing\n&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;possible options:\n&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;-n name  Creates new post \n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-n&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;---\n&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;layout: post\n&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;title:  \&quot;\&quot;\n&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;date:   &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleDateFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yyyy-MM-dd HH:mm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\n&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;categories: \n&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;---\n\n&quot;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;fileName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleDateFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yyyy-MM-dd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;-&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.markdown&quot;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileSystems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;_posts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Exception writing file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Оказалось очень удобно.
Хочется отметить следующие моменты:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;На Kotlin можно писать один в один как на Java. 
Это не значит, что нужно так делать. Но то, что можно очень хорошо. Существенно упрощает переход на новый язык.&lt;/li&gt;
  &lt;li&gt;Я не знал, но оказывается можно не ставить точку с запятой в конце утверждения&lt;/li&gt;
  &lt;li&gt;В IDEA работает &lt;code class=&quot;highlighter-rouge&quot;&gt;sout&lt;/code&gt; тоже удобно для тех, кто переходит с Java&lt;/li&gt;
  &lt;li&gt;В сконвертированной программе нет ни одного объявления типа, а значит не надо писать Борщ борщ = new Борщ(), это удобно на мой взгляд.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Одним из первых постов в этот блог был пост про ускорение работы с Jekyll с помощью Java. Там я писал, что:</summary></entry><entry><title type="html">Области применения автоматного программирования</title><link href="http://yamakarov.ru/software/automata/2018/09/26/automata-domain.html" rel="alternate" type="text/html" title="Области применения автоматного программирования" /><published>2018-09-26T19:20:00+03:00</published><updated>2018-09-26T19:20:00+03:00</updated><id>http://yamakarov.ru/software/automata/2018/09/26/automata-domain</id><content type="html" xml:base="http://yamakarov.ru/software/automata/2018/09/26/automata-domain.html">&lt;p&gt;Как только я начал разбираться в том, как работает автоматное программирование, стали появляться различные приложения для этого подхода.&lt;/p&gt;

&lt;p&gt;Статья &lt;a href=&quot;Как не выстрелить себе в ногу из конечного автомата&quot;&gt;Как не выстрелить себе в ногу из конечного автомата&lt;/a&gt; описывает применение автоматного программирования при разработке iOS приложений. Оказывается удобным в этой концепции описывать список статей с комментариями.&lt;/p&gt;

&lt;p&gt;Автоматное программирование с разной степенью успешности применяют для разработки javascript виджетов. 
Эта область применения мне кажется очень перспективной.
Состояния позволяют рассуждать о поведении виджета при различных событиях.&lt;/p&gt;

&lt;p&gt;Лампорт пишет, что использовал автоматы для описания распределенных систем в &lt;a href=&quot;https://www.microsoft.com/en-us/research/publication/time-clocks-ordering-events-distributed-system/?from=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fum%2Fpeople%2Flamport%2Fpubs%2Ftime-clocks.pdf&quot;&gt;Time, Clocks, and the Ordering of Events in a Distributed System&lt;/a&gt; Правда, он пишет что использование автоматов никто не заметил, и шутит, что он специально перечитал свою статью, чтобы убедиться в том, что он действительно написал.
Состояния я встречал в другой статье Лампорта &lt;a href=&quot;https://lamport.azurewebsites.net/pubs/fast-mutex.ps&quot;&gt;A Fast Mutual Exclusion Algorithm&lt;/a&gt;.
Там они используются для доказательства корректности программы. 
После каждой строчки исполнения агенты, исполняющие алгоритм синхронизации попадают в определенное состояние, которое характеризуется набором условий. Таким образом мы можем рассматривать любую программу как конечный автомат. 
И вроде как не сам Лампорт это придумал, а есть отсылки к Susan Owicki and David Gries. An axiomatic proof technique for parallel programs.
Таким образом автоматы могут быть очень удобны для доказательства различных алгоритмов синхронизации.&lt;/p&gt;

&lt;p&gt;Также в распределенных системах хорошо себя зарекомендовал протокольный подход.
И протоколы, кажется, неплохо верифицируются с помощью автоматов.&lt;/p&gt;

&lt;p&gt;К тому же, автоматы неплохо соответствуют тому, как работает процессор.&lt;/p&gt;

&lt;p&gt;Одной из основных областей применения автоматов является разработка компиляторов.
Регулярные выражения на них основаны.&lt;/p&gt;

&lt;p&gt;Они очень неплохо поддаются визуализации, что может быть и вредит им. 
Так как привело к большому количеству попыток создания визуальных средств программирования.&lt;/p&gt;

&lt;p&gt;Существуют примеры использования автоматного программирования с помощью MPS от IDEA.&lt;/p&gt;

&lt;p&gt;Я сам начал пытаться применять идею состояний и событий к разработке компонент на Angular и очень доволен получаемыми результатами.&lt;/p&gt;</content><author><name></name></author><summary type="html">Как только я начал разбираться в том, как работает автоматное программирование, стали появляться различные приложения для этого подхода.</summary></entry><entry><title type="html">Автоматное программирование</title><link href="http://yamakarov.ru/software/2018/09/25/switch-programming.html" rel="alternate" type="text/html" title="Автоматное программирование" /><published>2018-09-25T17:30:00+03:00</published><updated>2018-09-25T17:30:00+03:00</updated><id>http://yamakarov.ru/software/2018/09/25/switch-programming</id><content type="html" xml:base="http://yamakarov.ru/software/2018/09/25/switch-programming.html">&lt;p&gt;Сегодня изучал работы &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%A8%D0%B0%D0%BB%D1%8B%D1%82%D0%BE,_%D0%90%D0%BD%D0%B0%D1%82%D0%BE%D0%BB%D0%B8%D0%B9_%D0%90%D0%B1%D1%80%D0%B0%D0%BC%D0%BE%D0%B2%D0%B8%D1%87&quot;&gt;Шалыто&lt;/a&gt; посвященные автоматному программированию.
Эта технология кажется перспективной.
Однако на мой вкус представлена из рук вон плохо, я например стал чуть-чуть понимать суть только с третьего подхода.
Даже функциональное программирование и теорию категорий, кажется проще освоить.&lt;/p&gt;

&lt;p&gt;Идея автоматного программирования заключается в построении управляющего автомата.
Для этой цели программа описывается, как набор состояний, событий и переходов между состояниями.&lt;/p&gt;

&lt;p&gt;В статьях про &lt;a href=&quot;http://is.ifmo.ru/automata/&quot;&gt;автоматное программирование&lt;/a&gt; с сайта университета ИТМО приводятся примеры использования
автоматного программирования для разработки микроконтроллеров.&lt;/p&gt;

&lt;p&gt;Сам Шалыто в своих статьях упирает на то, что использовать автоматное программирование надо повсеместно.
Такие программы проще в отладке и подаются неведомому мне Model Checking.&lt;/p&gt;

&lt;p&gt;Это полностью укладывается в мою вчерашнюю фразу по &lt;a href=&quot;/software/2018/09/24/programmer-job.html&quot;&gt;интереснyю концепцию&lt;/a&gt;  написания программ. 
По-видимому это были отголоски предыдущих попыток осознать автоматное программирование.&lt;/p&gt;

&lt;p&gt;Мне кажутся перспективными следующие моменты:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Идея состояний - четко выделив состояния, мы можем определить так называемое фазовое пространство системы и в нем доказывать разные свойства, обычно состояние в программе не выделяется и на осознается, от этого не понятны краевые условия. Они не понятны и не проверяются, а в эксплуатации из-за этого происходят ошибки.&lt;/li&gt;
  &lt;li&gt;Идея событий - события это очень модная сейчас тема, которая под вывеской реактивного программирования переходит из UI в серверное программирование. Если совместить события с состояниями, то получается очень мощная концепция разработки, которая не раз помогала мне в решении различных багов при многопоточном программировании. Когда мы выделяем события, мы тем самым определяем что может произойти в системе. Выделив события мы чисто формально можем создать цепочки событий и применить их к выделенным состояниям. И в этом случае становится просто убедиться, что отсутствуют ошибки при любых событиях в любых состояниях. 
Если же ошибка все таки находится, это значит только что мы неправильно определили состояния или не учли все события.&lt;/li&gt;
  &lt;li&gt;События и состояния недостаточны для моделирования окружающего мира, поэтому в автоматном программировании используются обработчики переходов из состояния в состояние.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Даже базовое примение этих концепций, без формальных доказательств, приводи к упрощению  по крайней мере разработки пользовательских интерфейсов.
Это странно, но я вижу несколько причин недостаточного развития автоматного программирования:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Авторы упирают на графические интерфейсы, что не есть гуд. Опыт показал, что текстовое представление предпочтительней.&lt;/li&gt;
  &lt;li&gt;Большое количество примеров касается лифта, что не является классическим примером для программирования, по-видимому школа ИТМО не заморачивалась сильно на пользовательские интерфейсы, или я еще не нашел нужных данных.&lt;/li&gt;
  &lt;li&gt;Возможно, просто не нашелся герой, который двинет автоматное программирование в массы.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Сегодня изучал работы Шалыто посвященные автоматному программированию. Эта технология кажется перспективной. Однако на мой вкус представлена из рук вон плохо, я например стал чуть-чуть понимать суть только с третьего подхода. Даже функциональное программирование и теорию категорий, кажется проще освоить.</summary></entry></feed>