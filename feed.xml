<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="http://yamakarov.ru/feed.xml" rel="self" type="application/atom+xml" /><link href="http://yamakarov.ru/" rel="alternate" type="text/html" /><updated>2018-11-26T18:09:56+03:00</updated><id>http://yamakarov.ru/feed.xml</id><title type="html">Записки Java программиста</title><subtitle>Блог о разработке web админок, CRM-ок и прочего. 
</subtitle><entry><title type="html">Чак Норрис запускает программы без опреационной системы</title><link href="http://yamakarov.ru/software/2018/11/26/without-os.html" rel="alternate" type="text/html" title="Чак Норрис запускает программы без опреационной системы" /><published>2018-11-26T18:07:00+03:00</published><updated>2018-11-26T18:07:00+03:00</updated><id>http://yamakarov.ru/software/2018/11/26/without-os</id><content type="html" xml:base="http://yamakarov.ru/software/2018/11/26/without-os.html">&lt;p&gt;Очень интересный ответ на StackOverflow про то как &lt;a href=&quot;https://stackoverflow.com/questions/22054578/how-to-run-a-program-without-an-operating-system/32483545#32483545&quot;&gt;запустить программу без использования операционной системы&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">Очень интересный ответ на StackOverflow про то как запустить программу без использования операционной системы.</summary></entry><entry><title type="html">Интересное введение в (Ре)Акторы</title><link href="http://yamakarov.ru/software/2018/11/23/multi-threading.html" rel="alternate" type="text/html" title="Интересное введение в (Ре)Акторы" /><published>2018-11-23T18:18:00+03:00</published><updated>2018-11-23T18:18:00+03:00</updated><id>http://yamakarov.ru/software/2018/11/23/multi-threading</id><content type="html" xml:base="http://yamakarov.ru/software/2018/11/23/multi-threading.html">&lt;p&gt;Понравились &lt;a href=&quot;http://ithare.com/multi-coring-and-non-blocking-instead-of-multi-threading-with-a-script/&quot;&gt;слайды про реакторы&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Особенно была интересная первая часть про требования и зачем нужна многопоточность.
И надо повнимательнее разобраться с третьей частью по результаты использования реакторов.
Они впечатляют, удалось снизить количество серверов в системе и при этом увеличить пропускную способность до космических значений.&lt;/p&gt;</content><author><name></name></author><summary type="html">Понравились слайды про реакторы.</summary></entry><entry><title type="html">Программирование управляемое данными</title><link href="http://yamakarov.ru/data-oriented-programming/2018/11/22/dop.html" rel="alternate" type="text/html" title="Программирование управляемое данными" /><published>2018-11-22T18:26:00+03:00</published><updated>2018-11-22T18:26:00+03:00</updated><id>http://yamakarov.ru/data-oriented-programming/2018/11/22/dop</id><content type="html" xml:base="http://yamakarov.ru/data-oriented-programming/2018/11/22/dop.html">&lt;p&gt;Посмотрел интересный доклад с CppCon 2018 про &lt;a href=&quot;https://www.youtube.com/watch?v=yy8jQgmhbAU&quot;&gt;программирование управляемое данными&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Несмотря на противоречивое название доклада, он оказался по существу и критикует результаты к которым приводит объектно ориентированная парадигма в разработке больших систем.&lt;/p&gt;

&lt;p&gt;Сокрытие данных оказывается плохой идеей, так как очень часто невозможно пользоваться из одного объекта другим не зная его реализацию.
По крайне мере очень трудно сделать это достаточно эффективно.&lt;/p&gt;

&lt;p&gt;Докладчик приводит конкретный пример реализации анимаций в движке html рендеринга, который получается ускорить в 6 раз отказавшись от работы с объектами и перейдя к использованию парадигмы 
программирования управляемого данными.&lt;/p&gt;

&lt;p&gt;В целом такой подход можно отнести к суровым оптимазициям, которые следует применять в хорошо изученной области.
Там же где требования не ясны и все изменчиво, по признанию автора, не следует отказываться от объектно-ориентированной парадигмы.&lt;/p&gt;

&lt;p&gt;В интернетах также рекомендуют посмотреть еще одно &lt;a href=&quot;https://www.youtube.com/watch?v=rX0ItVEVjHc&quot;&gt;видео&lt;/a&gt; на эту тему.&lt;/p&gt;

&lt;p&gt;В целом после доклада мне стало понятнее, как делать программы дружественные кэшу. 
Также очевидно это перекликается с функциональным программирование и программирование для видеокарт.
Этот подход способен существенно увеличить параллелизм программ.&lt;/p&gt;

&lt;p&gt;Еще Кнут писал, не распараллеливайте алгоритмы, распараллеливайте работу с данными.
И в принципе концепция пайпов обработки данных, кажется очень мощной.&lt;/p&gt;</content><author><name></name></author><summary type="html">Посмотрел интересный доклад с CppCon 2018 про программирование управляемое данными.</summary></entry><entry><title type="html">Java: вывод типов</title><link href="http://yamakarov.ru/java/2018/11/21/java-var.html" rel="alternate" type="text/html" title="Java: вывод типов" /><published>2018-11-21T14:53:00+03:00</published><updated>2018-11-21T14:53:00+03:00</updated><id>http://yamakarov.ru/java/2018/11/21/java-var</id><content type="html" xml:base="http://yamakarov.ru/java/2018/11/21/java-var.html">&lt;p&gt;В Java 10 появилось ключевое слово &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;.
Теперь можно не писать тип переменной.
В некоторых случаях компилятор сам его выведет.
Например, работает вот такой код:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Script&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello type inference!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Эта фича сокращает объем кода, который надо написать.
Она удобна, когда у вас есть несколько вложенных вызовов, в которые передается параметр и вы хотите поменять тип этого параметра.
В этом случае вам не придется переопределять сигнатуры вызываемых методов.&lt;/p&gt;

&lt;p&gt;К недостаткам можно отнести снижение читаемости кода.
Если раньше при объявлении переменной сразу был ясен ее тип, то сейчас надо переходить к определению функции, возвращающей объект.
В IDE это сделать довольно просто, но если вы читаете пуллреквест на github, это сделать сложнее.&lt;/p&gt;

&lt;p&gt;Лично мне эта функциональность нравится и она удобна в большинстве случаев, но есть люди, которые считают это шагом назад в развитии Java.&lt;/p&gt;</content><author><name></name></author><summary type="html">В Java 10 появилось ключевое слово var. Теперь можно не писать тип переменной. В некоторых случаях компилятор сам его выведет. Например, работает вот такой код:</summary></entry><entry><title type="html">Диаграмма вложенности памяти</title><link href="http://yamakarov.ru/svg/2018/11/20/memory-diagram.html" rel="alternate" type="text/html" title="Диаграмма вложенности памяти" /><published>2018-11-20T17:35:00+03:00</published><updated>2018-11-20T17:35:00+03:00</updated><id>http://yamakarov.ru/svg/2018/11/20/memory-diagram</id><content type="html" xml:base="http://yamakarov.ru/svg/2018/11/20/memory-diagram.html">&lt;p&gt;До сих пор я не размещал в блоге диаграм.
Решил попробовать нарисовать диаграму вложенности памяти.
Вот что получилось:&lt;/p&gt;

&lt;svg height=&quot;340&quot; width=&quot;1000&quot;&gt;
  &lt;ellipse cx=&quot;300&quot; cy=&quot;160&quot; rx=&quot;200&quot; ry=&quot;150&quot; style=&quot;fill:yellow;stroke:black;stroke-width:2&quot; /&gt;
  &lt;ellipse cx=&quot;300&quot; cy=&quot;160&quot; rx=&quot;160&quot; ry=&quot;120&quot; style=&quot;fill:lightgreen;stroke:black;stroke-width:2&quot; /&gt;
  &lt;ellipse cx=&quot;300&quot; cy=&quot;160&quot; rx=&quot;120&quot; ry=&quot;90&quot; style=&quot;fill:lightblue;stroke:black;stroke-width:2&quot; /&gt;
  &lt;rect x=&quot;250&quot; y=&quot;110&quot; width=&quot;100&quot; height=&quot;100&quot; style=&quot;fill:white;stroke-width:3;stroke:rgb(0,0,0)&quot; /&gt;
  &lt;text x=&quot;270&quot; y=&quot;165&quot; fill=&quot;black&quot;&gt;Регистры&lt;/text&gt;
  &lt;text x=&quot;285&quot; y=&quot;180&quot; fill=&quot;black&quot;&gt;CPU&lt;/text&gt;
  &lt;text x=&quot;270&quot; y=&quot;230&quot; fill=&quot;black&quot;&gt;CPU Кэш&lt;/text&gt;
  &lt;text x=&quot;285&quot; y=&quot;270&quot; fill=&quot;black&quot;&gt;ОЗУ&lt;/text&gt;
  &lt;text x=&quot;285&quot; y=&quot;300&quot; fill=&quot;black&quot;&gt;ПЗУ&lt;/text&gt;
&lt;/svg&gt;

&lt;p&gt;Нарисовано с помощью простого svg:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;svg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;340&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1000&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ellipse&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cx=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;300&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cy=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;160&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rx=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;200&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ry=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;150&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fill:yellow;stroke:black;stroke-width:2&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ellipse&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cx=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;300&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cy=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;160&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rx=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;160&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ry=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;120&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fill:lightgreen;stroke:black;stroke-width:2&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ellipse&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cx=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;300&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cy=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;160&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rx=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;120&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ry=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;90&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fill:lightblue;stroke:black;stroke-width:2&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;rect&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;250&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;110&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fill:white;stroke-width:3;stroke:rgb(0,0,0)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;text&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;270&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;165&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fill=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;black&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Регистры&lt;span class=&quot;nt&quot;&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;text&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;285&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;180&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fill=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;black&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;CPU&lt;span class=&quot;nt&quot;&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;text&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;270&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;230&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fill=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;black&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;CPU Кэш&lt;span class=&quot;nt&quot;&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;text&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;285&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;270&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fill=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;black&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;ОЗУ&lt;span class=&quot;nt&quot;&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;text&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;285&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;300&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fill=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;black&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;ПЗУ&lt;span class=&quot;nt&quot;&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><summary type="html">До сих пор я не размещал в блоге диаграм. Решил попробовать нарисовать диаграму вложенности памяти. Вот что получилось:</summary></entry><entry><title type="html">Интересный паттерн</title><link href="http://yamakarov.ru/java/pattern/2018/11/19/jira-issue.html" rel="alternate" type="text/html" title="Интересный паттерн" /><published>2018-11-19T17:54:00+03:00</published><updated>2018-11-19T17:54:00+03:00</updated><id>http://yamakarov.ru/java/pattern/2018/11/19/jira-issue</id><content type="html" xml:base="http://yamakarov.ru/java/pattern/2018/11/19/jira-issue.html">&lt;p&gt;Есть &lt;a href=&quot;https://github.com/rcarz/jira-client&quot;&gt;библиотека&lt;/a&gt; для работы с Jira Rest API.&lt;/p&gt;

&lt;p&gt;Доступ к тикету в ней выглядит, примерно, так:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;BasicCredentials&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;creds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BasicCredentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;batman&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pow! pow!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;JiraClient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jira&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JiraClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://jira.example.com/jira&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;creds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Issue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;issue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jira&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getIssue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TEST-123&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;issue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ASSIGNEE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;batman&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Пользователь создает jira клиента&lt;/li&gt;
  &lt;li&gt;Клиент создает тикет&lt;/li&gt;
  &lt;li&gt;Тикет создает обновлятор&lt;/li&gt;
  &lt;li&gt;Обновлятор выполняется&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Выглядит довольно изящно и красиво.
Я в такой манере никогда не писал код.
У меня обычно:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Создаем клиента&lt;/li&gt;
  &lt;li&gt;Создаем тикет&lt;/li&gt;
  &lt;li&gt;Обновляем тикет&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;И тут даже мне очевидно, где объектно-ориентированный подход, а где процедурный.&lt;/p&gt;</content><author><name></name></author><summary type="html">Есть библиотека для работы с Jira Rest API.</summary></entry><entry><title type="html">Serializable уровень изоляции</title><link href="http://yamakarov.ru/serializable/2018/11/16/serializable-isolation-level.html" rel="alternate" type="text/html" title="Serializable уровень изоляции" /><published>2018-11-16T18:21:00+03:00</published><updated>2018-11-16T18:21:00+03:00</updated><id>http://yamakarov.ru/serializable/2018/11/16/serializable-isolation-level</id><content type="html" xml:base="http://yamakarov.ru/serializable/2018/11/16/serializable-isolation-level.html">&lt;p&gt;Наконец-то понял как работает &lt;a href=&quot;https://sqlperformance.com/2014/04/t-sql-queries/the-serializable-isolation-level&quot;&gt;serailizable уровень изоляции&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Нашел ему применение.
Пусть у вас есть таблица, в которой добавлются новые записи с возврастающими id.
Вы читаете из этой таблицы только новые записи.
И вам очень не хотелось бы, чтобы записи с более высоким id появлялись раньше более низких.
А такое может произойти, если в в начале транзакции вы генерите id и они длятся разное время, так что по времени 
транзакции могут быть вложены друг в друга.&lt;/p&gt;

&lt;p&gt;Serializable уровень изоляции требует, чтобы записи и чтения в транзакции происходили, так как будто они происходят в какой-то линейной последовательности.
Таким образом исключается возможность вложения транзакций описанное выше.&lt;/p&gt;

&lt;p&gt;Конечно, ничего не бывает бесплатным и приходится платить за взятие лока на записи которые используются при чтении.
В моем случае лочится будет вся таблица, что меня устраивает, таблица не нагружена и очень важно не потерять ни одного обновления.&lt;/p&gt;</content><author><name></name></author><summary type="html">Наконец-то понял как работает serailizable уровень изоляции.</summary></entry><entry><title type="html">Scala: параметры по имени</title><link href="http://yamakarov.ru/scala/2018/11/15/scala-by-name-parameters.html" rel="alternate" type="text/html" title="Scala: параметры по имени" /><published>2018-11-15T16:43:00+03:00</published><updated>2018-11-15T16:43:00+03:00</updated><id>http://yamakarov.ru/scala/2018/11/15/scala-by-name-parameters</id><content type="html" xml:base="http://yamakarov.ru/scala/2018/11/15/scala-by-name-parameters.html">&lt;p&gt;Сегодня встретился с интересным кодом на Scala:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logDebug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isDebugEnabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Подумал, что какие-то недалекие люди такое писали. 
Ведь всем известно, что&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;log.isDegubEnabled
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Вызывается для того, чтобы умный JIT компилятор увидел, что это выражение всегда &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; и выпилил вызов&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;log.debug(msg)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;И мы бы сэкономили кучу ресурсов на формировании сложного &lt;code class=&quot;highlighter-rouge&quot;&gt;msg&lt;/code&gt;.
Оказалось это я дурак и Scala поддерживает параметры по имени, о чем нам говорит &lt;code class=&quot;highlighter-rouge&quot;&gt;=&amp;gt;&lt;/code&gt; перед типом.
И тогда значение параметра вычисляется не в момент вызова функции, а в момент использования.
Это позволяет не только экономить ресурсы при выключенном дебаге, но и делать еще некоторые трюки, например реализовать функцию &lt;code class=&quot;highlighter-rouge&quot;&gt;notIf&lt;/code&gt;, которая вычисляет значение выражение только если условие выполняется.&lt;/p&gt;

&lt;p&gt;В Java такого нет, а в Clojure такое можно было бы реализовать с помощью макросов.&lt;/p&gt;</content><author><name></name></author><summary type="html">Сегодня встретился с интересным кодом на Scala:</summary></entry><entry><title type="html">Неизвестные языки</title><link href="http://yamakarov.ru/software/2018/11/14/unknown-languages.html" rel="alternate" type="text/html" title="Неизвестные языки" /><published>2018-11-14T18:50:00+03:00</published><updated>2018-11-14T18:50:00+03:00</updated><id>http://yamakarov.ru/software/2018/11/14/unknown-languages</id><content type="html" xml:base="http://yamakarov.ru/software/2018/11/14/unknown-languages.html">&lt;p&gt;Раньше было хорошо.
Взял тоненькую книжечку от Кернигана и Ричи про C, прочитал, и кодь себе на здоровье.
Ничего тебе больше и не надо знать.&lt;/p&gt;

&lt;p&gt;Теперь другое.
Я не знаю:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Java для того, чтобы написать бекэнд&lt;/li&gt;
  &lt;li&gt;Не знаю Groovy для сборки проекта&lt;/li&gt;
  &lt;li&gt;Не знаю SQL для запросов к базе данных&lt;/li&gt;
  &lt;li&gt;Не знаю Typescript для фронтенда&lt;/li&gt;
  &lt;li&gt;Не знаю Javascript, в который конвертируется Typescript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Как жить-то при таком количестве языков?&lt;/p&gt;</content><author><name></name></author><summary type="html">Раньше было хорошо. Взял тоненькую книжечку от Кернигана и Ричи про C, прочитал, и кодь себе на здоровье. Ничего тебе больше и не надо знать.</summary></entry><entry><title type="html">Достигая совершенства</title><link href="http://yamakarov.ru/excellence/2018/11/13/archieving-excellence.html" rel="alternate" type="text/html" title="Достигая совершенства" /><published>2018-11-13T19:07:00+03:00</published><updated>2018-11-13T19:07:00+03:00</updated><id>http://yamakarov.ru/excellence/2018/11/13/archieving-excellence</id><content type="html" xml:base="http://yamakarov.ru/excellence/2018/11/13/archieving-excellence.html">&lt;p&gt;Очень интересная статья, про то как &lt;a href=&quot;https://fermatslibrary.com/s/the-mundanity-of-excellence-an-ethnographic-report-on-stratification-and-olympic-swimmers&quot;&gt;пловцы достигают совершенства&lt;/a&gt;.
Кажется, это может быть верно в любой области.&lt;/p&gt;

&lt;p&gt;Основные тезисы в заключении:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Качество превосходит количество. Делать больше не значит делать лучше. Важно в процессе работы меняться и совершенствоваться.&lt;/li&gt;
  &lt;li&gt;Талант ничего не объясняет. Совершенство не является следствием природных данных.&lt;/li&gt;
  &lt;li&gt;Совершенство есть результат составных усилий. Повторение и улучшение обычных простых действий с течением времени приводит к выдающимся результатам.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Очень интересная статья, про то как пловцы достигают совершенства. Кажется, это может быть верно в любой области.</summary></entry></feed>