<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="http://yamakarov.ru/feed.xml" rel="self" type="application/atom+xml" /><link href="http://yamakarov.ru/" rel="alternate" type="text/html" /><updated>2018-06-09T13:27:30+03:00</updated><id>http://yamakarov.ru/</id><title type="html">Записки Java программиста</title><subtitle>Блог о разработке web админок, CRM-ок и прочего. 
</subtitle><entry><title type="html">Разбор Hello nasm</title><link href="http://yamakarov.ru/assembler/nasm/2018/06/09/hello-nasm-demystified.html" rel="alternate" type="text/html" title="Разбор Hello nasm" /><published>2018-06-09T10:29:00+03:00</published><updated>2018-06-09T10:29:00+03:00</updated><id>http://yamakarov.ru/assembler/nasm/2018/06/09/hello-nasm-demystified</id><content type="html" xml:base="http://yamakarov.ru/assembler/nasm/2018/06/09/hello-nasm-demystified.html">&lt;p&gt;В посте &lt;a href=&quot;/assembler/nasm/2018/06/08/nasm.html&quot;&gt;“Hello nasm assembler”&lt;/a&gt; я привел пример программы на ассемблере &lt;a href=&quot;https://www.nasm.us&quot;&gt;nasm&lt;/a&gt; для Mac OS, но совершенно не рассказал как она работает.
Повторю её ещё раз код программы:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;; /usr/local/bin/nasm -f macho64 64.asm &amp;amp;&amp;amp; ld -macosx_version_min 10.7.0 -lSystem -o 64 64.o &amp;amp;&amp;amp; ./64&lt;/span&gt;
  
&lt;span class=&quot;kr&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;
   
&lt;span class=&quot;kr&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
  
&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2000004&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;; write&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;; stdout&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;syscall&lt;/span&gt;
 
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2000001&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;; exit&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;syscall&lt;/span&gt;
  
  
&lt;span class=&quot;kr&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
  
&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;db&lt;/span&gt;      &lt;span class=&quot;s&quot;&gt;&quot;Hello, world!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;equ&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Комментарии к коду программы:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;В &lt;a href=&quot;https://www.nasm.us/doc/nasmdoc3.html&quot;&gt;языке nasm&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt; обозначает комментарии. Строчка 1.&lt;/li&gt;
  &lt;li&gt;В строчке 3 &lt;code class=&quot;highlighter-rouge&quot;&gt;global start&lt;/code&gt; для &lt;a href=&quot;https://stackoverflow.com/a/17899048/6677530&quot;&gt;линкера указывается&lt;/a&gt; с какого места начинать выполнение программы&lt;/li&gt;
  &lt;li&gt;Директива &lt;code class=&quot;highlighter-rouge&quot;&gt;section&lt;/code&gt; задает секции для &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%9E%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BD%D1%8B%D0%B9_%D0%BC%D0%BE%D0%B4%D1%83%D0%BB%D1%8C&quot;&gt;объектных файлов&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;.text (строка 5) - для кода, стандартный в Linux
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;start:&lt;/code&gt; в 7 строчке метка, она отмечает место в коде на которое можно переходить&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mov&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;syscall&lt;/code&gt; &lt;a href=&quot;https://software.intel.com/sites/default/files/managed/39/c5/325462-sdm-vol-1-2abcd-3abcd.pdf&quot;&gt;x86 операторы&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mov&lt;/code&gt; помещает данные в регистры&lt;/li&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;syscall&lt;/code&gt; осуществляет системный вызов и передает управление ядру операционной системы&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rax, rdi, rsi, rdx&lt;/code&gt; регистры общего назначения в которые кладутся данные, имеют стандартные способы использования
            &lt;ul&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rax&lt;/code&gt; - аккумулятор&lt;/li&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rdi&lt;/code&gt; - указатель на получатель для строк&lt;/li&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rsi&lt;/code&gt; - указатель на источник для строк&lt;/li&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rdx&lt;/code&gt; - указатель Ввода/Вывода&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x2000004, 0x2000001&lt;/code&gt; константы для идентификации системных вызовов на Windows и Linux будут другие&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;.data (строка 19) - для констант, тоже стандартный
        &lt;ul&gt;
          &lt;li&gt;с помощью меток строки 21, 22 можно объявлять переменные, причем &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; значит что переменная локальная и относится к ближайшей сверху метке. Точке может быть несколько.&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;db &quot;Hello, world!&quot;, 10&lt;/code&gt; инициализирует данные в выходном файле, объектном &lt;a href=&quot;https://www.nasm.us/doc/nasmdoc3.html#section-3.2.1&quot;&gt;section 3.2.1&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;equ    $ - msg&lt;/code&gt; присваивает метке константное значение. В данном случае из отступа начала данной метки вычитается отступ msg и мы получаем длину msg в байтах &lt;a href=&quot;https://www.nasm.us/doc/nasmdoc3.html#section-3.2.4&quot;&gt;section 3.2.4&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">В посте “Hello nasm assembler” я привел пример программы на ассемблере nasm для Mac OS, но совершенно не рассказал как она работает. Повторю её ещё раз код программы:</summary></entry><entry><title type="html">Hello nasm assembler</title><link href="http://yamakarov.ru/assembler/nasm/2018/06/08/nasm.html" rel="alternate" type="text/html" title="Hello nasm assembler" /><published>2018-06-08T12:33:00+03:00</published><updated>2018-06-08T12:33:00+03:00</updated><id>http://yamakarov.ru/assembler/nasm/2018/06/08/nasm</id><content type="html" xml:base="http://yamakarov.ru/assembler/nasm/2018/06/08/nasm.html">&lt;p&gt;В продолжение темы про &lt;a href=&quot;/memory/2018/05/23/memory-hierarchy.html&quot;&gt;иерархию памяти&lt;/a&gt; я решил написать пост про &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%A0%D0%B5%D0%B3%D0%B8%D1%81%D1%82%D1%80_%D0%BF%D1%80%D0%BE%D1%86%D0%B5%D1%81%D1%81%D0%BE%D1%80%D0%B0&quot;&gt;регистры процессора&lt;/a&gt;. 
Однако, это оказалось очень большой темой, о которой я не могу написать кратенько. Видимо, потому что плохо в этом разбираюсь.
Программируя на Java мне никогда не приходилось оперировать регистрами.
Это очень низкоуровневые вещи.
Однако, чтобы разбираться с проблемами в производительности о регистрах надо знать.
Для того, чтобы потрогать регистры я установил &lt;a href=&quot;https://www.nasm.us/index.php&quot;&gt;Nasm&lt;/a&gt;.
Он первый попался под руку и поддерживал Windows синтаксис, который мне показался понятнее Linux варианта.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install nasm
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;В первой же ссылке в Google на &lt;em&gt;&lt;a href=&quot;https://gist.github.com/FiloSottile/7125822&quot;&gt;mac os assembler hello world&lt;/a&gt;&lt;/em&gt; оказалось:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;span class=&quot;c&quot;&gt;; /usr/local/bin/nasm -f macho64 64.asm &amp;amp;&amp;amp; ld -macosx_version_min 10.7.0 -lSystem -o 64 64.o &amp;amp;&amp;amp; ./64&lt;/span&gt;
  
&lt;span class=&quot;kr&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;
   
&lt;span class=&quot;kr&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
  
&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2000004&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;; write&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;; stdout&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;syscall&lt;/span&gt;
 
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2000001&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;; exit&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;syscall&lt;/span&gt;
  
  
&lt;span class=&quot;kr&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
  
&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;db&lt;/span&gt;      &lt;span class=&quot;s&quot;&gt;&quot;Hello, world!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;equ&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Если этот код сохранить в файле &lt;strong&gt;64.asm&lt;/strong&gt; и выполнить первую строчку из файла, то она дейсвительно выведет:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Hello, world!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Viola!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Почему так происходит я постараюсь рассказать в следующих постах.&lt;/p&gt;</content><author><name></name></author><summary type="html">В продолжение темы про иерархию памяти я решил написать пост про регистры процессора. Однако, это оказалось очень большой темой, о которой я не могу написать кратенько. Видимо, потому что плохо в этом разбираюсь. Программируя на Java мне никогда не приходилось оперировать регистрами. Это очень низкоуровневые вещи. Однако, чтобы разбираться с проблемами в производительности о регистрах надо знать. Для того, чтобы потрогать регистры я установил Nasm. Он первый попался под руку и поддерживал Windows синтаксис, который мне показался понятнее Linux варианта.</summary></entry><entry><title type="html">Иерархия памяти</title><link href="http://yamakarov.ru/memory/2018/05/23/memory-hierarchy.html" rel="alternate" type="text/html" title="Иерархия памяти" /><published>2018-05-23T12:45:00+03:00</published><updated>2018-05-23T12:45:00+03:00</updated><id>http://yamakarov.ru/memory/2018/05/23/memory-hierarchy</id><content type="html" xml:base="http://yamakarov.ru/memory/2018/05/23/memory-hierarchy.html">&lt;p&gt;Память компьютера организована иерархически. 
Самые верхние уровни обеспечивают самый быстрый доступ.
Однако существуют физические ограничения на объем непосредственно доступной памяти.
Грубо говоря, вы просто не можете понатыкать столько пинов к процессору чтобы в регистры помещались мегабайты или гигабайты.
Принято выделять следующие уровни в иерархии:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Регистры процессора&lt;/li&gt;
  &lt;li&gt;Кэш процессора (L1, L2, L3)&lt;/li&gt;
  &lt;li&gt;Оперативная память&lt;/li&gt;
  &lt;li&gt;Дисковая память&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Прикладные программисты обычно не работают с регистрами, это дело компилятора.
Кэшем мы тоже плохо управляем.
Мы только можем помочь компилятору и процессору предсказать что класть в кэш, используя правильные алгоритмы.
Эти алгоритмы работают с последовательными участками памяти.&lt;/p&gt;

&lt;p&gt;Оперативная память уже под полным нашим контролем и в высоконагруженных приложениях все держится в памяти.
Дисковая память настолько медленная, что обращения к ней могут происходить только в аналитике данных.
Высокой нагрузки дисковая память не выдерживает и служит главным образом для архивирования информации.&lt;/p&gt;

&lt;p&gt;Рекомендую прочитать:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Интересный образ &lt;a href=&quot;https://www.quora.com/Why-does-memory-hierarchy-exist&quot;&gt;магазинов поблизости&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Статья на вики, как отправная точка для знакомства с &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%98%D0%B5%D1%80%D0%B0%D1%80%D1%85%D0%B8%D1%8F_%D0%BF%D0%B0%D0%BC%D1%8F%D1%82%D0%B8&quot;&gt;иерархией памяти&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Память компьютера организована иерархически. Самые верхние уровни обеспечивают самый быстрый доступ. Однако существуют физические ограничения на объем непосредственно доступной памяти. Грубо говоря, вы просто не можете понатыкать столько пинов к процессору чтобы в регистры помещались мегабайты или гигабайты. Принято выделять следующие уровни в иерархии:</summary></entry><entry><title type="html">Highload минимум от Мартина Томпсона</title><link href="http://yamakarov.ru/highload/2018/05/22/martin-know-how.html" rel="alternate" type="text/html" title="Highload минимум от Мартина Томпсона" /><published>2018-05-22T09:53:00+03:00</published><updated>2018-05-22T09:53:00+03:00</updated><id>http://yamakarov.ru/highload/2018/05/22/martin-know-how</id><content type="html" xml:base="http://yamakarov.ru/highload/2018/05/22/martin-know-how.html">&lt;p&gt;&lt;a href=&quot;https://www.real-logic.co.uk/training.html&quot;&gt;Темы и вопросы&lt;/a&gt; для подготовки к собеседованию на должность старшего программиста в проект с высокой нагрузкой.&lt;/p&gt;

&lt;p&gt;Наверно, можно и тренинг пройти у Мартина, я не пробовал.&lt;/p&gt;</content><author><name></name></author><summary type="html">Темы и вопросы для подготовки к собеседованию на должность старшего программиста в проект с высокой нагрузкой.</summary></entry><entry><title type="html">Важно правильно читать из памяти</title><link href="http://yamakarov.ru/java/memory/2018/05/21/memory-access-patterns.html" rel="alternate" type="text/html" title="Важно правильно читать из памяти" /><published>2018-05-21T12:27:00+03:00</published><updated>2018-05-21T12:27:00+03:00</updated><id>http://yamakarov.ru/java/memory/2018/05/21/memory-access-patterns</id><content type="html" xml:base="http://yamakarov.ru/java/memory/2018/05/21/memory-access-patterns.html">&lt;p&gt;Интересная статья о том, как важно правильно &lt;a href=&quot;https://mechanical-sympathy.blogspot.ru/2012/08/memory-access-patterns-are-important.html&quot;&gt;обращаться к памяти&lt;/a&gt;.
Необходимо учитывать железные особенности, кэши различных уровней для того, чтобы добиться действительно быстрой работы алгоритмов.
В эпоху многопроцессорности, становится важным не только количество операций в алгоритме, но и количество попаданий в кэш.&lt;/p&gt;</content><author><name></name></author><summary type="html">Интересная статья о том, как важно правильно обращаться к памяти. Необходимо учитывать железные особенности, кэши различных уровней для того, чтобы добиться действительно быстрой работы алгоритмов. В эпоху многопроцессорности, становится важным не только количество операций в алгоритме, но и количество попаданий в кэш.</summary></entry><entry><title type="html">Angular: работа с элементами объявленными в шаблоне</title><link href="http://yamakarov.ru/angular/2018/05/18/angular-element-ref.html" rel="alternate" type="text/html" title="Angular: работа с элементами объявленными в шаблоне" /><published>2018-05-18T10:57:00+03:00</published><updated>2018-05-18T10:57:00+03:00</updated><id>http://yamakarov.ru/angular/2018/05/18/angular-element-ref</id><content type="html" xml:base="http://yamakarov.ru/angular/2018/05/18/angular-element-ref.html">&lt;p&gt;В Angular можно объявить переменную в шаблоне:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;squareClick&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;__square&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]=&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]=&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;В виде &lt;code class=&quot;highlighter-rouge&quot;&gt;#squareClick&lt;/code&gt;.
А потом можно получить на неё ссылку в коде элемента:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ViewChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'squareClick'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;squareClick&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ElementRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;И использовать, например для создания потока событий:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;squareClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nativeElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;click$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;click$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><summary type="html">В Angular можно объявить переменную в шаблоне:</summary></entry><entry><title type="html">Angular CLI</title><link href="http://yamakarov.ru/angular/angular-cli/2018/05/17/square-click.html" rel="alternate" type="text/html" title="Angular CLI" /><published>2018-05-17T09:54:00+03:00</published><updated>2018-05-17T09:54:00+03:00</updated><id>http://yamakarov.ru/angular/angular-cli/2018/05/17/square-click</id><content type="html" xml:base="http://yamakarov.ru/angular/angular-cli/2018/05/17/square-click.html">&lt;p&gt;&lt;a href=&quot;https://cli.angular.io/&quot;&gt;Angular CLI&lt;/a&gt; очень удобный инструмент для разработки на angular.
Для создания нового проекта достаточно:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ng new square-click
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Для запуска:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ng serve
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Можно разрабатывать.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Viola!&lt;/strong&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Angular CLI очень удобный инструмент для разработки на angular. Для создания нового проекта достаточно:</summary></entry><entry><title type="html">Компилируем и запускаем Java код с помощью Docker</title><link href="http://yamakarov.ru/java/docker/2018/05/16/docker-java.html" rel="alternate" type="text/html" title="Компилируем и запускаем Java код с помощью Docker" /><published>2018-05-16T08:56:00+03:00</published><updated>2018-05-16T08:56:00+03:00</updated><id>http://yamakarov.ru/java/docker/2018/05/16/docker-java</id><content type="html" xml:base="http://yamakarov.ru/java/docker/2018/05/16/docker-java.html">&lt;p&gt;Возьмем просто Java класс:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, Docker!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Его можно скомпилировать используя docker &lt;a href=&quot;https://hub.docker.com/_/openjdk/&quot;&gt;openjdk образ&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run --mount src=`pwd`,target=/test_container,type=bind openjdk javac /test_container/Main.java
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Тут хитрость в том, что я подключаю к docker контейнер текущую директорию.
На выходе в той же директории я получу &lt;code class=&quot;highlighter-rouge&quot;&gt;Main.class&lt;/code&gt;.
И тут же могу его запустить:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run --mount src=`pwd`,target=/test_container,type=bind openjdk java -cp /test_container Main
Hello, Docker!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;В openjdk много разных тагов и я могу экспериментировать со всеми поддерживаемыми версиями jdk и jre.
Очень удобно!&lt;/p&gt;</content><author><name></name></author><summary type="html">Возьмем просто Java класс:</summary></entry><entry><title type="html">Hello, Docker!</title><link href="http://yamakarov.ru/docker/2018/05/15/hello-docker.html" rel="alternate" type="text/html" title="Hello, Docker!" /><published>2018-05-15T09:39:00+03:00</published><updated>2018-05-15T09:39:00+03:00</updated><id>http://yamakarov.ru/docker/2018/05/15/hello-docker</id><content type="html" xml:base="http://yamakarov.ru/docker/2018/05/15/hello-docker.html">&lt;p&gt;Я толком уже не помню, но как-то docker появился на моей машине.
Я даже помню его было не очень трудно установить.
Теперь я решил запустить какой-нибудь контейнер.
Это должно было быть просто судя по &lt;a href=&quot;https://docs.docker.com/get-started/#test-docker-installation&quot;&gt;гайду&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run hello-world
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Но оказалось, что не все так просто:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker: Error response from daemon: Get https://registry-1.docker.io/v2/: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers).
See 'docker run --help'.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Сначала я думал, что виноваты &lt;a href=&quot;https://stackoverflow.com/questions/23111631/cannot-download-docker-images-behind-a-proxy&quot;&gt;proxy&lt;/a&gt;.
Но оказалось, все проще.
Нужно было &lt;a href=&quot;https://forums.docker.com/t/error-response-from-daemon-get-https-registry-1-docker-io-v2/23741/29&quot;&gt;залогиниться&lt;/a&gt;.
Причем в docker надо логиниться под логином.
Можно зайти и под email, но тогда будет:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker: Error response from daemon: Get https://registry-1.docker.io/v2/library/hello-world/manifests/latest: unauthorized: incorrect username or password.
See 'docker run --help'.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Когда правильно залогинился и рестартанул docker daemon:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.
    (amd64)
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker ID:
 https://hub.docker.com/

For more examples and ideas, visit:
 https://docs.docker.com/engine/userguide/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Интересные открытия продолжаются!&lt;/p&gt;</content><author><name></name></author><summary type="html">Я толком уже не помню, но как-то docker появился на моей машине. Я даже помню его было не очень трудно установить. Теперь я решил запустить какой-нибудь контейнер. Это должно было быть просто судя по гайду:</summary></entry><entry><title type="html">Docker для воспроизводимости окружения</title><link href="http://yamakarov.ru/docker/2018/05/14/docker.html" rel="alternate" type="text/html" title="Docker для воспроизводимости окружения" /><published>2018-05-14T10:23:00+03:00</published><updated>2018-05-14T10:23:00+03:00</updated><id>http://yamakarov.ru/docker/2018/05/14/docker</id><content type="html" xml:base="http://yamakarov.ru/docker/2018/05/14/docker.html">&lt;p&gt;&lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; очень удобно использовать для воспроизведения одинакового окружения на разных компьютерах.
Вам достаточно настроить Docker, и вы сможете запускать любые image, не сильно заботясь о том, какие версии библиотек установлены на вашей машине.
Это очень удобно и работает на Linux, Windows и Macos.
И не важно на каком языке вы разрабатываете Python, Javascript или Java.
Кроме упрощения разработки, это также упрощает деплоймент. 
Вы можете отправлять в облако сразу свой образ.
В &lt;a href=&quot;https://ok.ru&quot;&gt;Одноклассниках&lt;/a&gt; облако построено с использованием этой технологии.&lt;/p&gt;</content><author><name></name></author><summary type="html">Docker очень удобно использовать для воспроизведения одинакового окружения на разных компьютерах. Вам достаточно настроить Docker, и вы сможете запускать любые image, не сильно заботясь о том, какие версии библиотек установлены на вашей машине. Это очень удобно и работает на Linux, Windows и Macos. И не важно на каком языке вы разрабатываете Python, Javascript или Java. Кроме упрощения разработки, это также упрощает деплоймент. Вы можете отправлять в облако сразу свой образ. В Одноклассниках облако построено с использованием этой технологии.</summary></entry></feed>